{
  "page-intro": {
    "id": 1,
    "title": "Введение в веб-технологии",
    "moduleLinkHref": "/page?moduleName=page-intro",
    "lessons": {
      "lesson-1": {
        "lessonTitle": "О вебе и технологиях",
        "lessonDescription": "LessonDescription",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": ""
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": " Веб-страница - это документ в формате HTML, который может быть отображен в браузере Интернета. Она содержит текст, изображения, видео, ссылки и другие элементы, которые могут быть интерактивными и позволяют посетителям просматривать, искать и взаимодействовать с информацией на странице."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": " Веб-разработка - это процесс создания и развития веб-сайтов и веб-приложений. Он включает в себя использование языков программирования, таких как HTML, CSS, JavaScript и других технологий, таких как Node.js, PHP, Ruby или Python для создания структуры, дизайна и функциональности веб-сайтов и веб-приложений. В том числе в веб-разработке используется методология и базовый подход к разработке проекта и работе с сервером и базой данных."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": " Веб-разработка - это процесс создания и развития веб-сайтов и веб-приложений. Он включает в себя использование языков программирования, таких как HTML, CSS, JavaScript и других технологий, таких как Node.js, PHP, Ruby или Python для создания структуры, дизайна и функциональности веб-сайтов и веб-приложений. В том числе в веб-разработке используется методология и базовый подход к разработке проекта и работе с сервером и базой данных."
        },
        {
          "tag": "h2",
          "classes": [
            "lesson__sub-header"
          ],
          "textContent": " Веб-разработка может быть разделена на две основные части: front-end, back-end."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": " Front-end это термин, используемый для обозначения части веб-разработки, которая отвечает за интерфейс и пользовательский опыт веб-сайта. Это включает в себя использование языков и технологий, таких как HTML, CSS и JavaScript, для создания и дизайна графического интерфейса, а также обеспечения интерактивности и динамической отзывчивости сайта."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": " Back-end (серверная часть) - отвечает за логику и функциональность сайта, а также за доступ к базе данных. Используются языки и технологии такие как PHP, Ruby, Python, Node.js."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": " Full-stack (все стек) - объединяет знания front-end и back-end в одном разработчике. Такой разработчик имеет полное понимание всего процесса разработки и может работать на всех уровнях веб-разработки"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": " Веб-технологии - это набор языков и инструментов, используемых для создания, развития и поддержки веб-сайтов и веб-приложений. Они включают в себя языки программирования, такие как HTML, CSS и JavaScript, а также фреймворки и библиотеки, такие как React, Angular и Vue.js для создания интерфейса и обработки данных, серверные языки и технологии, такие как PHP, Ruby, Python и Node.js, и базы данных, такие как MySQL, MongoDB и PostgreSQL для хранения информации и взаимодействия с ней. В веб-разработке используются различные технологии и инструменты для решения различных задач и соответствующих потребностей."
        }
        ]
      },
      "lesson-2": {
        "lessonTitle": "Создание и редактирование кода",
        "lessonDescription": "LessonDescription",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": " IDE (Integrated Development Environment) - это программное обеспечение, которое объединяет в себе набор инструментов и функций для разработки программного обеспечения. Оно обычно включает в себя такие функции как редактор кода, отладчик, компилятор и интерпретатор, а также другие инструменты, которые могут быть полезны для разработки. Цель IDE состоит в том, чтобы упростить и ускорить разработку программного обеспечения, обеспечивая интегрированный интерфейс для всех этих инструментов. Например, Eclipse, Intellij IDEA, PyCharm являются популярными вариантами IDE."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": " Редактор кода - это программа, которая используется для создания, редактирования и отладки кода программного обеспечения. Редактор кода обычно имеет функции синтаксического и семантического выделения, автоматической индентации, подсказки кода и другие инструменты для упрощения работы с кодом. Редакторы кода могут быть интегрированы в IDE или могут быть использованы как отдельные программы. Например, Sublime Text, Atom, Visual Studio Code, Notepad++, являются популярными редакторами кода."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": " IDE (Integrated Development Environment) и редактор кода являются инструментами для редактирования и отладки кода, но они имеют различные функции и цели."
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": " Редактор кода это просто инструмент для редактирования кода, который обычно имеет функции синтаксического и семантического выделения, автоматическую индентацию, подсказки кода и другие инструменты, которые помогают упростить работу с кодом."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item "
            ],
            "textContent": " IDE же, это интегрированная среда разработки, которая объединяет в себе редактор кода, отладчик, компилятор и другие инструменты, которые необходимы для разработки и отладки программного обеспечения. Они также могут иметь дополнительные функции, такие как управление версиями, система сборки, интеграция с системой контроля версий и т.д."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": " В общем, редактор кода — это более простой инструмент для редактирования кода, в то время как IDE является более мощным инструментом, который обеспечивает более широкий спектр функций для разработчиков. В зависимости от потребностей и предпочтений разработчика, он может выбрать использовать один из этих инструментов или использовать их вместе."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": " Онлайн редактор кода - это инструмент, который позволяет редактировать код непосредственно в браузере без необходимости установки дополнительного ПО на компьютере. Это может быть полезно для редактирования кода на хостинге или для просмотра кода с различных устройств. Онлайн редакторы кода часто имеют более ограниченный набор функций, чем оффлайн IDE, но они могут быть более удобными для некоторых задач."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": " Visual Studio Code (VS Code) - это редактор кода, который разработан и поддерживается компанией Microsoft. Он отличается своей легкостью использования, множеством функций и поддержкой различных языков программирования."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": " VS Code идеально подходит для веб-разработки из-за множества функций и инструментов, которые он предоставляет. Некоторые из причин, по которым VS Code является популярным выбором для веб-разработчиков:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": " Он имеет множество плагинов и дополнений, которые можно установить, чтобы расширить функциональность редактора. Это может быть очень полезно для веб-разработки, так как многие из этих дополнений специализируются на языках, фреймворках и библиотеках, используемых в веб-разработке."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item "
            ],
            "textContent": " В VS Code имеется интегрированная отладка и интеграция с Git, что позволяет разработчикам легко исправлять ошибки и контролировать историю изменений кода."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item "
            ],
            "textContent": " Он имеет множество расширений и плагинов, которые могут дополнить функциональность редактора."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item "
            ],
            "textContent": " Он имеет интуитивный интерфейс и мощный дебаггер, что позволяет разработчикам эффективно работать с кодом. "
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item "
            ],
            "textContent": "Он поддерживает множество языков программирования, включая JavaScript, HTML, CSS, и множество фреймворков и библиотек."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text "
          ],
          "textContent": "В целом, VS Code является мощным инструментом для веб-разработки, который может помочь разработчикам эффективно и эффективно работать с кодом."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text "
          ],
          "textContent": "Веб-верстка - это процесс создания и оформления веб-страниц, используя языки HTML и CSS. Веб-верстка включает в себя планирование и организацию контента и дизайна, работу с различными элементами интерфейса, адаптивность и доступность для различных устройств и браузеров."
        }
        ]
      },
      "lesson-study": {
        "lessonTitle": "Самостоятельная работа",
        "lessonDescription": "Создайте новый HTML-документ с соответствующей структурой, включая раздел head и раздел body.",
        "lessonContent": [
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Описание задания:"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__text"
            ],
            "textContent": "Объясните разницу между HTML и CSS и их роль в интерфейсной веб-разработке. Приведите примеры того, как HTML и CSS работают вместе для создания визуально привлекательной веб-страницы. Создайте новый HTML-документ с соответствующей структурой, включая раздел head и раздел body."
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Ход работы:"
          },
          {
            "tag": "ol",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Ответьте на поставленные вопросы"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Перед созданием HTML-документа установите редактор кода VS Code"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Создайте папку с названием “webtechs” для выполнения самостоятельных работ в рамках данного курса. Откройте эту папку в VS Code"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Создайте папку “project_1” для выполнения первой работы"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Внутри неё создайте HTML-документ с именем “index.html”"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Создайте шаблон HTML-документа: объявите тип документа; укажите язык страницы; создайте тег, содержащий информацию о документе; укажите кодировку символов “UTF-8”; определите параметры отображения страницы на мобильных устройствах и настройки масштабирования; создайте заголовок страницы, отображаемый в окне браузера; создайте тег для размещения содержимого страницы."
              }
            ]
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Критерии оценивания:"
          },
          {
            "tag": "ul",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "В каталоге отсутствуют лишние файлы"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "HTML-документ назван в соответствии с описанием задания"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Шаблон HTML-документа содержит все, что перечислено в описании задания"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "W3C Markup Validation Service не указывает на ошибки"
              }
            ]
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Материалы для выполнения задания:"
          },
          {
            "tag": "ul",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://code.visualstudio.com/",
                      "target": "_blank"
                    },
                    "textContent": "Установить Visual Studio Code"
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  },
  "page-base-html": {
    "id": 2,
    "title": "Основы HTML",
    "moduleLinkHref": "/page?moduleName=page-base-html",
    "lessons": {
      "lesson-1": {
        "lessonTitle": "О HTML. <head>",
        "lessonDescription": "Lesson Descriotion",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "HTML (Hypertext Markup Language) - это язык разметки, который используется для создания веб-страниц. Он определяет структуру и содержание веб-страницы, определяя такие элементы, как заголовки, абзацы, списки, ссылки и изображения. HTML не содержит информации о внешнем виде веб-страницы, она определяется с помощью CSS."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Элементы разметки (HTML-элементы) - это компоненты, которые используются для создания веб-страниц на языке HTML."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": [{
            "tag": "span",
            "classes": [
              "lesson__text"
            ],
            "textContent": "Каждый элемент представляет собой тег, который обозначает начало и конец блока контента. Например, <p> является элементом для абзаца текста, <img> для изображения и <a> для ссылки. Элементы могут иметь атрибуты, которые используются для определения дополнительной информации о элементе, например: "
          },
          {
            "tag": "code",
            "classes": [
              "lesson__code"
            ],
            "textContent": "<img src=\"image.jpg\" alt=\"image\">"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Тег <html> является основным элементом в HTML, потому что он обозначает начало и конец документа HTML. Все другие элементы и контент должны находиться внутри этого тега."
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "<!DOCTYPE html>"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Doctype определяет версию HTML или XHTML, которую использует документ. Например, <!DOCTYPE html> указывает, что документ использует стандарт HTML5. Это очень важно, потому что браузеры интерпретируют код по-разному в зависимости от указанного стандарта. Если Doctype не указан или указан неправильно, браузер может отображать документ некорректно."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Тег <html> содержит две сущности: <head> и <body>, которые содержат метаданные и контент соответственно."
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<head> содержит информацию о странице, такую как заголовок, метаданные и ссылки на стили и скрипты."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<body> содержит основной контент страницы, который будет отображаться на экране пользователя."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Так как <html> является основным элементом, который содержит все другие элементы и контент, он играет важную роль в структуре документа HTML."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Метаданные в HTML документе это информация, которая предоставляет дополнительную информацию о странице, но не отображается непосредственно на странице. Они обычно располагаются внутри тега <head> и могут включать в себя теги <meta>, <title>, <link> и <script>. Например, <meta> тег может использоваться для описания ключевых слов для поисковых систем, а <title> тег для заголовка страницы."
        }
        ]
      },
      "lesson-2": {
        "lessonTitle": "Основные теги HTML",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Теги заголовков (header tags) в HTML используются для описания структуры и содержания страницы. Они начинаются с тега <h1> и идут до <h6>, где <h1> является наиболее важным и главным заголовком страницы, а <h6> является наименее важным. Это помогает поисковым системам лучше понимать структуру и содержание страницы, а также помогает посетителям сайта быстрее находить информацию, которую они ищут."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Тег <p> в HTML используется для описания абзаца текста. Он обозначает начало и конец абзаца текста и позволяет браузеру автоматически добавлять отступы между абзацами. Например:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__text"
            ],
            "textContent": "<p>This is the first paragraph.</p>"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__text"
            ],
            "textContent": "<p>This is the second paragraph.</p>"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В данном примере будет два абзаца с текстом \"This is the first paragraph.\" и \"This is the second paragraph.\"."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Теги <b>, <strong>, <i> и <em> в HTML используются для выделения текста."
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<b> и <strong> - обозначают жирное начертание текста. <strong> также указывает на важность текста, например, ключевые слова в поисковом запросе."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<i> и <em> - обозначают курсивное начертание текста. <em> также указывает на важность текста, например, ключевые слова в поисковом запросе."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": [{
            "tag": "span",
            "classes": [
              "lesson__text-fragment"
            ],
            "textContent": "<p>This text is <b>"
          },
          {
            "tag": "b",
            "classes": [
              "lesson__text-fragment"
            ],
            "textContent": "bold"
          },
          {
            "tag": "span",
            "classes": [
              "lesson__text-fragment"
            ],
            "textContent": "</b> and this text is <strong>"
          },
          {
            "tag": "strong",
            "classes": [
              "lesson__text-fragment"
            ],
            "textContent": "important"
          },
          {
            "tag": "span",
            "classes": [
              "lesson__text-fragment"
            ],
            "textContent": "</strong>.</p>"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": [{
            "tag": "span",
            "classes": [
              "lesson__text-fragment"
            ],
            "textContent": "<p>This text is <i>"
          },
          {
            "tag": "i",
            "classes": [
              "lesson__text-fragment"
            ],
            "textContent": "italic"
          },
          {
            "tag": "span",
            "classes": [
              "lesson__text-fragment"
            ],
            "textContent": "</i> and this text is <em>"
          },
          {
            "tag": "strong",
            "classes": [
              "lesson__text-fragment"
            ],
            "textContent": "important"
          },
          {
            "tag": "span",
            "classes": [
              "lesson__text-fragment"
            ],
            "textContent": "</em>.</p>"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Имейте ввиду, что в некоторых случаях лучше использовать стили для выделения текста, так как это дает больше гибкости в настройке внешнего вида сайта."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "<q> - это тег для обозначения короткой цитаты внутри текста. Он обычно отображается как выделенный курсивом или двойными кавычками."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "<cite> - это тег для обозначения названия книги, документа или другого источника. Он обычно отображается как курсив."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В HTML коде можно добавлять комментарии, которые не будут отображаться в браузере, но будут доступны для просмотра в исходном коде страницы. Для этого используется специальный синтаксис:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "<!-- Здесь может быть ваш комментарий -->"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Комментарий должен начинаться с символа \"<!--\" и заканчиваться \"-->\". Любые символы между этими символами являются текстом комментария."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Комментарии можно использовать для добавления информации о коде или для удаления определенных частей кода без необходимости удалять их физически из файла."
        }
        ]
      },
      "lesson-3": {
        "lessonTitle": "Теги для изображений",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Тег <img> используется в HTML для встраивания изображений на веб-страницы. Для тега требуется атрибут источника (src), который определяет URL-адрес отображаемого файла изображения или же путь к нему в каталоге файлов, а также может включать другие атрибуты, такие как alt (альтернативное текстовое описание), width, height и style. Тег <img> является самозакрывающимся тегом, что означает, что для него не требуется закрывающий тег. Изображение будет отображаться рядом с текстом на странице и может быть оформлено с помощью CSS."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Теги <figure> и <figcaption> используются в HTML для придания дополнительного семантического значения изображениям и другим носителям информации на веб-страницах."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Тег <figure> используется для группировки связанного контента, такого как изображение и подпись, и может использоваться для описания изображений, видео, списков кодов и других типов контента. "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Тег <figcaption> используется для предоставления подписи или описания содержимого в теге <figure>. Тег <figcaption> необязателен, но его рекомендуется использовать, если присутствует тег <figure>."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Теги <figure> и <figcaption> помогают поисковым системам лучше понимать содержимое страницы, а также могут быть использованы для создания более доступных веб-страниц путем предоставления альтернативных текстовых описаний. Пример:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "<figure>"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "<img src=\"image.jpg\" alt=\"Прекрасный пейзаж\">"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "<figcaption> Прекрасный пейзаж </figcaption>"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "</figure>"
          }
          ]
        }
        ]
      },
      "lesson-4": {
        "lessonTitle": "Ссылки и кнопки",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Тег <a>, или ссылочный тег, используется в HTML для создания гиперссылок. Для тега требуется атрибут href, который указывает URL или адрес веб-страницы, на который должна указывать ссылка. Текст или содержимое в теге <a> обычно отображается в виде гиперссылки, и при нажатии на нее пользователь переходит на указанный URL-адрес или веб-страницу."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Тег <a> также может включать другие атрибуты, такие как target, который можно использовать для указания того, как должна открываться ссылка, и rel, который можно использовать для указания взаимосвязи между текущим документом и связанным документом."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Например:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "<a href=\"https://www.example.com \">Посетите пример</a>"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В этом примере текст \"Пример посещения\" будет отображаться в виде гиперссылки на веб-странице, и при нажатии на него пользователь перейдет на веб-страницу, расположенную по адресу \"https://www.example.com\""
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Кроме того, тег <a> также можно использовать для создания ссылок внутри страницы, называемых \"якорными ссылками\" или \"привязками страницы\", используя атрибут id элемента и атрибут \"href\" тега <a>, чтобы указать на идентификатор элемента."
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "<a href=\"#раздел1\"> Перейти к разделу 1</a>"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "<h2 id=\"section1\">Раздел 1</h2>"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В этом примере тег <a> с текстом \"Перейти к разделу 1\" приведет пользователя к разделу страницы с идентификатором \"section1\"."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Атрибут \"download\" для тега <a> используется для указания того, что связанный файл следует загружать, а не переходить к нему. Когда атрибут присутствует, браузер предложит пользователю сохранить связанный файл на своем устройстве вместо перехода к нему. Значение атрибута может быть использовано для указания предлагаемого имени файла при сохранении файла. Например, "
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "<a href=\"myfile.pdf\" download=\"Мой файл\">Скачать PDF</a> "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Данная запись приведет к ссылке на файл \"myfile.pdf\" и предложит пользователю сохранить файл с именем \"Мой файл\". Этот атрибут поддерживается большинством современных браузеров."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Тег <button> используется для создания кнопки с возможностью кликабельности на веб-странице. Кнопка может использоваться для отправки формы, запуска функции JavaScript или перехода на другую страницу. Содержимое кнопки, такое как текст или изображение, отображаемые на ней, помещается между открывающим и закрывающим тегами <button>. Например, "
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "<button> Нажмите на меня</button> "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Запись создаст кнопку с отображаемым на ней текстом \"Нажмите на меня\"."
        }
        ]
      },
      "lesson-5": {
        "lessonTitle": "Теги списков",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В HTML есть несколько тегов, используемых для создания списков:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<ol> - создает упорядоченный список, где каждый элемент пронумерован."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<ul> - создает неупорядоченный список, где каждый элемент представлен маркированной точкой."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<li> - определяет элемент списка, который должен быть помещен внутри тега упорядоченного или неупорядоченного списка."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Теги <ol> и <ul> также могут иметь атрибуты, такие как \"type\" для указания типа маркера/нумерации и \"start\" для указания начального номера упорядоченного списка. "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Пример:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "<ol>"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "--<li>Пункт 1</li>"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "--<li>Пункт 2</li>"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "--<li>Пункт 3</li>"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "</ol>"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "<!--  -->"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "<ul>"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "--<li>Элемент A</li>"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "--<li>Пункт B</li>"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "--<li>Элемент C</li>"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "</ul>"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": ""
        }
        ]
      },
      "lesson-6": {
        "lessonTitle": "Теги таблиц",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "HTML теги таблиц используются для создания таблиц, которые могут быть использованы для отображения данных в организованном и структурированном формате. Это может быть полезно для отображения данных, таких как статистика, финансовые данные, календари и многое другое."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Теги, используемые для создания таблиц в HTML, включают:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<table> - создает таблицу"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<tr> - создает строку таблицы"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<th> - создает ячейку заголовка таблицы"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<td> - создает обычную ячейку таблицы"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<caption> - создает заголовок таблицы"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<colgroup> - группирует столбцы в таблице для управления их стилем"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<col> - определяет стиль для одного или нескольких столбцов в таблице"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<thead> - группирует строки с заголовком таблицы"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<tbody> - группирует основные строки"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<tfoot> - группирует строки с итогами или подвалом таблицы"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Использование этих тегов позволяет создавать структурированные и доступные таблицы данных для веб-страниц."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Теги таблиц в HTML считаются устаревшими, потому что они используются для описания логической структуры данных, а не для их отображения. Это может приводить к проблемам доступности и создавать ненужную сложность в коде. Вместо того, чтобы использовать теги таблиц для описания внешнего вида, рекомендуется использовать современные технологии, такие как CSS и JavaScript."
        }
        ]
      },
      "lesson-7": {
        "lessonTitle": "Служебные и прочие теги",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Служебные теги <lang>, <meta> и <title>:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<lang> тег используется для указания языка содержимого документа."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<meta> тег используется для хранения метаданных о документе, таких как ключевые слова, описание, автор и т.д."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<title> тег используется для указания заголовка документа, который отображается в заголовке окна браузера."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Прочие теги:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<br> - обозначает перенос строки. Этот тег не содержит закрывающего тега."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<pre> - обозначает предварительно отформатированный текст. Текст внутри этого тега отображается с сохранением пробелов и переносов строк."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<sub> - обозначает нижний индекс. Текст внутри этого тега отображается как нижний индекс."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<code> - обозначает код. Текст внутри этого тега отображается как код."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<abbr> - обозначает абревиатуру. Текст внутри этого тега отображается как абревиатура."
          }
          ]
        }
        ]
      },
      "lesson-8": {
        "lessonTitle": "<div> & <span>",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "<div> и <span> - это два часто используемых HTML-тега для веб-разработки."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "<div> (сокращение от division) - это блочный элемент, который используется, как правило, для создания контейнера для других HTML-элементов. Обычно он используется для создания структуры макета веб-страницы путем разделения страницы на разделы, такие как верхний и нижний колонтитулы, основное содержимое и боковая панель. к элементам <div> могут быть применены стили CSS для управления внешним видом содержимого, которое они содержат."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "<span> - это строчный элемент, который используется для группировки небольших фрагментов текста или других встроенных элементов в блоке содержимого. В отличие от <div>, <span> не создает новый контекст форматирования блока и не приводит к появлению новой строки в содержимом. Он используется для применения стилей или выполнения действий (таких как добавление всплывающей подсказки) к определенным разделам текста в пределах большего блока текста."
        }
        ]
      },
      "lesson-9": {
        "lessonTitle": "Валидность, VS Code и плагины",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Валидность в HTML относится к тому, соответствует ли документ официальным стандартам, установленным Консорциумом Всемирной паутины (W3C). Валидный HTML-документ следует синтаксису и структуре, определенным спецификацией, и использует одобренные элементы и атрибуты. Валидный документ считается хорошо сформированным и может быть проанализирован и правильно отображен веб-браузерами. Использование корректного HTML может улучшить доступность и кроссбраузерную совместимость, а также упростить обслуживание и обновление веб-сайта."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "HTML-валидатор - это инструмент, который проверяет синтаксис HTML-документа, чтобы убедиться, что он соответствует правильной структуре и формату в соответствии со стандартом HTML. Он может проверять наличие отсутствующих или неправильно вложенных тегов, отсутствующих атрибутов и других ошибок. "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "W3C (World Wide Web Consortium) предоставляет бесплатный онлайн-валидатор, который может проверять HTML веб-страницы, а также валидатор для электронной почты в формате HTML. Использование средства проверки может помочь гарантировать, что веб-сайт доступен и корректно функционирует в разных браузерах и устройствах."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "HTML-валидатор W3C имеет три уровня сообщений об ошибках: \"ошибки\", \"предупреждения\" и \"информация\"."
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "\"Ошибки\" - это проблемы, которые должны быть исправлены для того, чтобы HTML считался действительным. Обычно это проблемы, которые могут привести к неправильному отображению страницы или ее неправильной работе."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "\"Предупреждения\" - это проблемы, которые строго не требуются для обеспечения корректности HTML, но считаются лучшими практиками. Это может включать использование устаревших тегов или атрибутов или неиспользование последней версии HTML."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Сообщения \"Info\" - это информационные сообщения, которые не указывают на проблему с HTML, а скорее содержат предложения по улучшению кода."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Важно отметить, что, хотя правильный HTML-код важен, это не означает, что он будет работать идеально или будет доступен для всех пользователей, но это хорошая практика для обеспечения того, чтобы код был написан последовательным и структурированным образом."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "VS Code, как и многие другие редакторы кода, имеет большую экосистему плагинов или расширений, которые могут быть установлены для добавления дополнительной функциональности в редактор. Они могут включать в себя такие вещи, как подсветка синтаксиса для конкретного языка, форматирование кода, средства отладки и многое другое. Плагины могут быть установлены через VS Code marketplace, доступ к которому можно получить непосредственно из редактора. Пользователи также могут искать, устанавливать плагины и управлять ими непосредственно из интерфейса VS Code."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Emmet - это плагин для VS Code и других текстовых редакторов, который позволяет вам быстрее писать HTML и CSS, используя сокращенные обозначения. Например, вместо написания полного HTML-тега вы можете использовать сочетание клавиш типа \"div\" и нажать клавишу tab, чтобы развернуть его до полного тега <div>. Emmet также предоставляет ярлыки для свойств и значений CSS, что позволяет вам писать CSS более эффективно. Это может быть очень полезным инструментом для веб-разработчиков и дизайнеров, позволяющим ускорить их рабочий процесс и повысить производительность."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Плагин \" Russian Language Pack\" для VS Code - это плагин, который добавляет поддержку русского языка в редакторе VS Code. Он также может включать в себя такие функции, как проверка орфографии на русском языке, сочетания клавиш на русском языке и другие функции, зависящие от конкретного языка. Этот плагин может быть установлен через VS Code marketplace и может быть легко включен или отключен в настройках редактора."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "HTML Hint - это плагин VS Code, который обеспечивает компоновку HTML-файлов в реальном времени путем проверки их на соответствие набору правил. Это может помочь выявить и исправить ошибки и улучшить общее качество кода. Плагин может быть настроен на использование различных наборов правил в зависимости от потребностей проекта. Это также позволяет пользователям добавлять пользовательские правила. Некоторые из функций HTML Hint включают обнаружение отсутствующих или недопустимых атрибутов, определение устаревших тегов и обнаружение незакрытых тегов."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Live Server - это расширение VS Code, которое позволяет разработчикам запускать локальный сервер разработки с функцией live reload. Эта функция автоматически перезагружает веб-страницу в браузере, как только в код вносятся какие-либо изменения. Это облегчает тестирование и отладку веб-страниц во время разработки. Расширение также поддерживает HTTPS и может открывать локальный сервер разработки в вашем браузере по умолчанию. Это популярное расширение среди веб-разработчиков, использующих VS Code в качестве основного редактора кода."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Кодстайл относится к соглашениям и руководящим принципам для написания и форматирования кода. Он может включать в себя такие вещи, как отступы, соглашения об именовании, комментарии и многое другое. Соблюдение согласованного стиля кода может облегчить чтение и понимание кода, а также может помочь в отладке и обслуживании. Некоторые популярные рекомендации по стилю кода включают руководство по стилю Google JavaScript, руководство по стилю Airbnb JavaScript и соглашения о кодировании Microsoft C#. Некоторые текстовые редакторы и IDE также имеют встроенные инструменты, помогающие вам применять стиль кода, такие как плагин EditorConfig для VS Code."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "EditorConfig - это плагин для VS Code, который помогает разработчикам поддерживать согласованные стили кодирования в разных редакторах и IDE. Это работает с использованием файла с именем .editorconfig в корне вашего проекта, который определяет правила для таких вещей, как отступы, символы в конце строки и кодировка файла. Когда вы открываете файл в VS Code, который является частью проекта с файлом .editorconfig, плагин автоматически применяет правила, определенные в этом файле, к редактору, гарантируя, что ваш код соответствует руководству по стилю проекта. Он также может быть интегрирован с другими плагинами для поддержки более сложных правил и конфигураций."
        }
        ]
      },
      "lesson-study": {
        "lessonTitle": "Самостоятельная работа",
        "lessonDescription": "Используя демонстрационный макет, дополните HTML-разметку HTML-документа, созданного в прошлом задании, подбирая необходимые теги к тем или иным элементам из вспомогательных материалов.",
        "lessonContent": [
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Описание задания:"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__text"
            ],
            "textContent": "Используя демонстрационный макет, дополните HTML-разметку HTML-документа, созданного в прошлом задании, подбирая необходимые теги к тем или иным элементам из вспомогательных материалов."
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Ход работы:"
          },
          {
            "tag": "ol",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Внутри папки для выполнения работ “webtechs” создайте папку для выполнения второй самостоятельной работы “project_2” и скопируйте в неё HTML-документ из папки “project_1”"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Внутри папки “project_2” разместите приложенные к заданию файлы: папка “img” с изображениями, изображение с именем “expected_result.png” и текстовый документ “text.docx”"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Ориентируясь на изображение “expected_result.png” наполните содержимым HTML-документ, используя правильные теги для элементов страницы. Используйте содержимое текстового документа “text.docx”, чтобы не вводить его вручную"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Реализуйте переходы по страницы с помощью “Ссылок-якорей” и атрибутов id"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "При написании путей используйте только относительные пути"
              }
            ]
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Критерии оценивания:"
          },
          {
            "tag": "ul",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Структура папки соответствует заданию"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Внешний вид страницы, открытой в браузере, соответствует изображению “expected_result.png”"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Используемые теги соответствуют элементам. Например, <h1> используется для создания главного заголовка страницы"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "В работе используются только относительные пути"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "W3C Markup Validation Service не указывает на ошибки"
              }
            ]
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Материалы для выполнения задания:"
          },
          {
            "tag": "ul",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://validator.w3.org/"
                    },
                    "textContent": "W3C Markup Validation Service"
                  }
                ]
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://github.com/MypyMypy/MypyMypy.github.io/blob/main/herzen-project/public/lesson-materials/2-base-html/text.docx",
                      "download": "true",
                      "target": "_blank"
                    },
                    "textContent": "Скачать текстовый документ"
                  }
                ]
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://github.com/MypyMypy/MypyMypy.github.io/blob/main/herzen-project/public/lesson-materials/2-base-html/img.zip",
                      "download": "true",
                      "target": "_blank"
                    },
                    "textContent": "Скачать архив с изображениями"
                  }
                ]
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://github.com/MypyMypy/MypyMypy.github.io/blob/main/herzen-project/public/lesson-materials/2-base-html/expected-result-html.png",
                      "download": "true",
                      "target": "_blank"
                    },
                    "textContent": "Скачать изображение ожидаемого результата"
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  },
  "page-base-css": {
    "id": 3,
    "title": "Основы CSS",
    "moduleLinkHref": "/page?moduleName=page-base-css",
    "lessons": {
      "lesson-1": {
        "lessonTitle": "CSS. Подключение CSS к HTML",
        "lessonDescription": "Lesson Description",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "CSS (Cascading Style Sheets) - это язык для описания внешнего вида документа, используемый в сочетании с HTML или XML. Он позволяет определять стили для элементов документа, такие как цвет, размер, отступы и другие свойства. Это позволяет разделить данные и представление, что облегчает поддержку и изменение дизайна сайта."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Тег <style> используется в HTML для определения раздела для стилей CSS. Стили, определенные в теге <style>, будут применяться ко всему документу и могут быть использованы для изменения внешнего вида HTML-элементов. Обычно он размещается в разделе <head> HTML-документа, но также может быть размещен в отдельных HTML-элементах с использованием атрибута \"style\". Тег <style> поддерживает как внутренние стили CSS, так и внешние таблицы стилей, связанные с помощью атрибута \"src\"."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Файл CSS (каскадные таблицы стилей) - это обычный текстовый файл, содержащий информацию о стиле веб-страницы. Эта информация о стиле может включать такие параметры, как размер шрифта, цвет, интервал и расположение. Файл CSS связан с файлом HTML с помощью тега <link>, который размещается в разделе <head> HTML-документа. CSS позволяет разработчикам отделять презентацию веб-сайта от его структуры, упрощая обслуживание и обновление дизайна."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Тег <link> используется для подключения CSS-файла к HTML-документу. Атрибут \"rel\" определяет взаимосвязь между текущим документом и связанным документом, а атрибут \"href\" указывает местоположение связанного документа. В случае подключения файла CSS для атрибута \"rel\" должно быть установлено значение \"таблица стилей\", а для атрибута \"href\" должно быть установлено местоположение файла CSS. Примером связывания CSS-файла с использованием тега <link> может быть:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "<link rel=\"stylesheet\" href=\"path/to/styles.css\">"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Эта строка указывает браузеру использовать файл styles.css в качестве таблицы стилей для текущего HTML-документа."
        }
        ]
      },
      "lesson-2": {
        "lessonTitle": "CSS-селекторы",
        "lessonDescription": "Lesson Descriotion",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Селектор CSS - это шаблон, используемый для выбора элементов, к которым будут применены правила CSS. Существует несколько типов селекторов, включая селекторы элементов, классов, идентификаторов и атрибутов. Селекторы элементов выбирают элементы на основе их названия, например \"p\" для всех элементов абзаца. "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Селекторы классов выбирают элементы на основе их атрибута класса, такого как \".myclass\" для всех элементов с атрибутом класса \"myclass\". "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Селекторы идентификаторов выбирают элементы на основе их атрибута идентификатора, такого как \"#myid\" для элемента с атрибутом идентификатора \"myid\"."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Перечисление селекторов, разделенных запятыми, называется \"группировкой\" селекторов. Это позволяет вам применять одни и те же стили CSS к нескольким элементам на вашей веб-странице. Например, если вы хотите, чтобы все заголовки на вашей веб-странице были красными, вы могли бы сгруппировать селекторы h1, h2, h3 и т.д. Вместе и установить свойству color значение red. Это привело бы к тому, что все заголовки были бы красными, без необходимости индивидуально применять стиль к каждому элементу заголовка."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "CSS-селектор \"*\" - это универсальный селектор, который выбирает все элементы на веб-странице. Его можно использовать для применения стилей ко всем элементам страницы сразу или в качестве отправной точки для более конкретных селекторов. Например, код \"{ margin: 0; padding: 0; }\" удалит все поля по умолчанию и отступы из всех элементов на странице, в то время как \"* > li { margin: 10px; }\" добавит поле в 10 пикселей ко всем элементам li, которые являются непосредственными дочерними элементами любого элемент на странице."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Приоритет стилей. Когда к элементу HTML применяется несколько стилей CSS, браузер следует набору правил, чтобы определить, какие стили имеют приоритет и в конечном итоге применяются к элементу. Эти правила включают:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Специфичность: чем конкретнее селектор, тем выше его приоритет. Например, селектор идентификаторов обладает более высокой специфичностью, чем селектор классов."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Порядок стилей: Стили, которые появляются позже в коде CSS, переопределяют стили, которые появляются ранее"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "!important: Стили, помеченные как !important, имеют наивысший приоритет и будут переопределять все остальные стили."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Важно отметить, что порядок стилей в файле CSS может повлиять на приоритет. Когда импортируются две или более таблиц стилей, порядок, в котором они импортируются, может повлиять на конечный результат."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Также важно отметить, что встроенные стили, добавленные непосредственно в HTML-элемент с использованием атрибута style, будут иметь наивысший приоритет, переопределяя все остальные стили."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Вложенный CSS-селектор - это селектор, который нацелен на элемент внутри другого элемента. Например, если у вас есть элемент <div> с идентификатором \"container\" и внутри этого <div> есть элемент <p>, вы можете использовать вложенный селектор \"#container p\", чтобы настроить таргетинг на элемент <p> внутри \"container\" <div>. Это полезно для применения стилей к определенным элементам в более крупном элементе контейнера, не затрагивая другие элементы на странице."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Вложенные селекторы могут затруднить чтение и поддержку CSS-кода, а также затруднить прогнозирование результатов применения стилей к элементам. Это связано с тем, что вложенные селекторы повышают специфичность CSS, затрудняя переопределение стилей. Кроме того, вложенные селекторы могут привести к большому количеству правил CSS и увеличению размера файла, что может замедлить производительность веб-сайта. В современном веб-дизайне считается лучшей практикой использовать плоскую структуру CSS и использовать селекторы классов и идентификаторов вместо вложенных селекторов для улучшения удобочитаемости, ремонтопригодности и производительности."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Единицы CSS используются для указания размера элементов на веб-странице. В CSS доступно несколько типов единиц измерения, в том числе:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Пиксели (px): фиксированная единица измерения, основанная на разрешении устройства."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Ems (em): относительная единица измерения, основанная на размере шрифта родительского элемента."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Rems (rem): аналогично ems, но основана на размере шрифта корневого элемента (обычно тега <html>)"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Проценты (%): относительная единица измерения, основанная на размере родительского элемента."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Пункты (pt): фиксированная единица измерения, основанная на традиционных размерах печати."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Единицы области просмотра (vw, vh, vmin, vmax): единицы измерения, основанные на размере области просмотра."
          }
          ]
        }
        ]
      },
      "lesson-3": {
        "lessonTitle": "Box-model элемента",
        "lessonDescription": "Lesson Descriotion",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Свойство \"display\" в CSS используется для указания того, как HTML-элемент должен отображаться на веб-странице. Его можно использовать для установки элемента в виде блока, встроенного или нет."
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Элементы c “display: block” занимают всю ширину родительского контейнера и создают новую строку после них. Примеры включают <div>, <h1>, <p>."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Элементы c “display: inline” элементы занимают только столько ширины, сколько необходимо, и не создают новую строку после них. Примеры включают <span>, <a>, <strong>."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Элементы с “display: none” вообще не отображаются на странице."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Свойство \"display\" часто используется в сочетании с другими свойствами макета, например \"position\", до которого мы дойдем позже, для управления макетом веб-страницы."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Свойство display в CSS используется для указания поведения и рендеринга элемента. Одним из значений, которые могут быть присвоены свойству display является inline-block."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Элементы с display: inline-block отображаются как inline элемент, но они могут иметь ширину и высоту и занимать место на странице. Это означает, что им можно задать ширину и высоту, и они будут учитывать другие inline элементы, такие как текст, которые появляются рядом с ними."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Кроме того, к элементам inline-block может быть применено выравнивание по вертикали, что невозможно с обычными inline элементами. К ним также могут быть применены поля и отступы, в отличие от обычных inline элементов."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В CSS свойство margin используется для создания пространства вокруг HTML-элемента. Его можно применить ко всем четырем сторонам элемента (верхней, правой, нижней и левой) или к отдельным сторонам, используя свойства margin-top, margin-right, margin-bottom и margin-left. Значением свойства margin может быть длина (например, 10 пикселей или 2em), процент или ключевое слово auto. Значение по умолчанию равно 0, также допускаются отрицательные значения. Поля прозрачны и не имеют цвета фона, в отличие от отступов. Они используются для создания пространства вокруг элемента."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Inline элементы, такие как текст, не зависят от верхнего и нижнего margin. Они могут иметь только левой и правой margin. Чтобы добавить пространство вокруг встроенного элемента, вы можете использовать свойство padding. Кроме того, вы можете использовать свойство line-height для добавления пространства над и под inline-элементом."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "\"Схлопывание\" внешних отступов - это специфическое поведение в CSS, которое происходит между соседними элементами. В случае, если у элемента есть отступ сверху или снизу, и рядом с ним есть другой элемент с таким же отступом, то они будут \"схлопнуты\" в один, и в итоге будет применен максимальный из них. Это может быть неожиданностью и вызвать проблемы в дизайне, поэтому следует быть осторожным и правильно указывать отступы для элементов."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Padding - это пространство между содержимым HTML-элемента и его границей. Он используется для создания пространства вокруг содержимого внутри элемента. Свойство CSS padding используется для установки отступов для всех четырех сторон элемента. Отступы могут быть установлены в пикселях, процентах, em, rem и других единицах измерения. Свойство padding также можно задать индивидуально для каждой стороны элемента (сверху, справа, снизу, слева), используя свойства padding-top, padding-right, padding-bottom и padding-left соответственно. Свойство padding также используется в сочетании со свойствами width и height для управления общим размером элемента на веб-странице."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Margin и Padding используются для создания пространства вокруг HTML-элемента. Основное различие между ними заключается в том, что margin используется для создания пространства вне элемента, в то время как padding используется для создания пространства внутри элемента."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Свойство Border в CSS используется для создания видимой границы у элемента. Также оно дает возможность её стилизации. Border можно задать как со всех сторон. Так и с одной из четырех с помощью свойств border-left, border-top, border-right, border-bottom. Пример:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "border: 1px solid black"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Свойство border можно заменить на три отдельных свойства:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Border-width – отвечает за толщину границы. Как правило, указывается в px"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Border-style - свойство отвечает за внешний вид границы. Граница может быть прямой ровной линией (solid), иметь вид пунктира (dashed), а также быть представлена в других видах в зависимости от значения"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Border-color – свойство отвечает за цвет границы"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Свойство CSS \"border-radius\" позволяет добавлять к элементам закругленные углы. Свойство используется для установки радиуса закругленных углов. Значение свойства может быть задано в пикселях, единицах измерения или процентах. Чем выше значение, тем более закругленными будут углы. Вы также можете использовать свойства \" border-top-left-radius\", \"border-top-right-radius\", \"border-bottom-left-radius\" и \"border-bottom-right-radius\", чтобы задать радиус для отдельных углов."
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "div {border-radius: 10px;}"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Это установит радиус 10 пикселей для всех четырех углов элемента div."
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "div {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "--border-top-left-radius: 10px;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "--border-top-right-radius: 5px;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "--border-bottom-left-radius: 15px;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "border-bottom-right-radius: 20px;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "}"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Это установит разный радиус для каждого угла элемента div."
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "div { border-radius: 10% }"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Это установит радиус в 10% от ширины элемента div"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "div { border-radius: 50% }"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Это создаст круговой элемент div"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Свойства width и height определяют фиксированную ширину и высоту элемента соответственно. Они могут принимать в качестве значения как абсолютные единицы измерения, так и относительные."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В случае, если мы используем проценты в качестве единиц измерения, размер элемента будет рассчитываться исходя из размеров родительского элемента."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Пользоваться данными свойствами необходимо с осторожностью, поскольку в случае, если содержимое элемента с фиксированными размерами будет их превышать, оно будет выходить за его пределы."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Как правило, абсолютное большинство элементов имеет возможность расширения или уменьшения своих размеров в будущем. Чтобы обеспечить возможность корректного редактирования элементов без необходимости внесения изменений в CSS, можно воспользоваться свойствами, ограничивающими размеры элементов:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Min-width – для установления минимальной ширины элемента"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Max-width - для установления максимальной ширины элемента"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Min-height – для установления минимальной высоты элемента"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Max-height – для установления максимальной высоты элемента"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Пример использования свойства max-width в CSS: "
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "img { max-width: 100%; }"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В этом примере ширина элемента img не будет превышать 100% от его родительского контейнера. Это может быть полезно для обеспечения того, чтобы изображения не становились слишком большими и не вызывали проблем с компоновкой на небольших экранах или в адаптивном дизайне."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Свойство CSS box-sizing позволяет разработчикам включать отступы и границы элемента в общую ширину и высоту элемента. По умолчанию свойству box-sizing присвоено значение content-box, что означает, что отступы и границы элемента не влияют на его общую ширину и высоту. При установке параметра box-sizing в значение border-box заполнение и граница элемента включаются в его общую ширину и высоту. Это может быть полезно для создания более предсказуемого макета и предотвращения неожиданных проблем с переполнением. Свойство может быть применено к отдельным элементам или ко всему документу с помощью CSS."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Использование box-sizing: border-box может быть полезным, поскольку оно включает padding и border элемента в общую ширину и высоту элемента, а не добавляет их за пределы размеров элемента. Это может упростить создание последовательных и предсказуемых макетов, поскольку размеры элемента останутся неизменными независимо от добавления к нему каких-либо padding или border. Кроме того, это также может упростить работу с элементами, имеющими фиксированную ширину или высоту, поскольку отступы и границы не повлияют на общий размер элемента."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В HTML поток элементов на веб-странице определяется расположением самих HTML-элементов, а также любыми стилями CSS, которые к ним применяются. На то, как элементы расположены на странице, могут влиять такие факторы, как расположение элементов в HTML-документе, их размер и габариты, а также применяемые к ним стили. Элементы могут быть расположены с помощью свойств CSS, таких как display, position и float, и могут быть размещены с использованием методов компоновки, таких как сетки и flexbox. На поток элементов на странице также может влиять механизм рендеринга браузера, а также взаимодействия с пользователем, такие как прокрутка и изменение размера окна браузера."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Использование только margin-right и margin-bottom может быть полезно в определенных ситуациях, когда вы хотите управлять расстоянием между элементами определенным образом. Например, если вы создаете макет на основе сетки, использование только правого поля и нижнего поля может помочь вам добиться равномерного расстояния между элементами без необходимости настраивать все четыре поля по отдельности. Кроме того, если вы работаете с адаптивным дизайном, использование только правого поля и нижнего поля может упростить настройку расстояния между элементами в зависимости от размера экрана или устройства."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "\"Обнуление\" margin и padding относится к практике установки полей и отступов элемента равными нулю. Обычно это делается для предотвращения нежелательного расстояния между элементами или для создания согласованного макета. Установив поля и отступы равными нулю, разработчики могут легче контролировать расстояние между элементами на странице. Поля и отступы позже могут быть установлены на определенные значения по мере необходимости. "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Один из способов лучше обнулить margin и padding - использовать CSS reset или normalize stylesheet. Эти таблицы стилей предназначены для удаления любых стилей по умолчанию, применяемых браузером, и создания согласованной основы для ваших собственных стилей, на которой вы можете основываться. "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Обнуление margin для последних элементов потока может помочь поддерживать согласованный интервал и компоновку по всей веб-странице или приложению. Без обнуления margin последних элементов расстояние между элементами может выглядеть неравномерным или непоследовательным. Кроме того, обнуление margin может помочь предотвратить проблемы с компоновкой, которые могут возникнуть, когда последний элемент имеет больший margin, чем другие элементы. Это может сделать общий дизайн веб-страницы или приложения более привлекательным визуально и облегчить пользователям навигацию."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Псевдокласс :last-child и :not(:last-child) используются в CSS для выбора элементов на основе их положения в дереве DOM."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Псевдокласс :last-child выбирает последний дочерний элемент своего родительского элемента. Например, если у вас есть элемент div с несколькими дочерними элементами, и вы хотите выбрать последний из них, вы должны использовать псевдокласс :last-child."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Псевдокласс :not(:last-child) выбирает все элементы, которые не являются последними дочерними элементами своего родительского элемента. Это может быть полезно, когда вы хотите выделить все элементы, кроме последнего."
        }
        ]
      },
      "lesson-4": {
        "lessonTitle": "Позиционирование элементов",
        "lessonDescription": "Lesson Descriotion",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Свойство CSS position используется для указания положения элемента на веб-странице. Он может быть установлен в одно из четырех значений: static relative, absolute, fixed."
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Static: элемент позиционируется в соответствии с обычным потоком документа и не зависит от свойства position. Это значение по умолчанию."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Relative: элемент расположен относительно своего обычного положения, но может быть перемещен с помощью свойств top, bottom, left и right."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Absolute: элемент позиционируется относительно своего ближайшего позиционированного предка, но может быть перемещен с помощью свойств top, bottom, left и right. Если позиционированный предок отсутствует, он позиционируется относительно исходного содержащего блока."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Fixed: элемент расположен относительно окна браузера и не перемещается при прокрутке страницы."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Свойство position часто используется в сочетании с другими свойствами макета, такими как top, bottom, left, right, width и height, для управления расположением и размером элементов на веб-странице."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Float - это метод компоновки в CSS, который позволяет расположить элементы рядом друг с другом, а не накладывать друг на друга. "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Хотя float может быть полезен в определенных ситуациях, он также может вызвать проблемы при неправильном использовании. Одна из проблем с float заключается в том, что это может привести к перекрыванию элементов или смещению других элементов с пути, что может создать неожиданные проблемы с компоновкой. Кроме того, плавающие элементы может быть трудно контролировать и точно позиционировать, и они также могут вызвать проблемы с производительностью в некоторых браузерах."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "overflow - это свойство CSS, которое управляет тем, как обрабатывается содержимое, превышающее размер элемента. Для определения способа отображения содержимого можно установить значение \"visible\", \"hidden\", \"scroll\" или \"auto\"."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "z-index - это свойство CSS, которое управляет порядком расположения элементов в стеке на странице. Элементы с более высоким значением z-индекса будут отображаться перед элементами с более низким значением z-индекса. Это может быть полезно для создания эффектов наложения слоев и управления видимостью перекрывающихся элементов."
        }
        ]
      },
      "lesson-5": {
        "lessonTitle": "Контейнеры содержимого",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В веб-верстке контейнер - это элемент, который используется для хранения и организации других элементов. Контейнеры можно использовать для создания определенных макетов и дизайнов для веб-страницы, а также для группировки элементов вместе, чтобы применять стили или скрипты к нескольким элементам одновременно. Некоторые примеры элементов контейнера в HTML включают теги div, section и article. Контейнеры могут быть оформлены с помощью CSS для управления шириной, высотой, отступами, полями и другими свойствами содержащихся в них элементов. Кроме того, контейнерам могут быть присвоены определенные классы или идентификаторы, позволяющие легко выбирать и стилизовать их с помощью CSS."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Область содержимого контейнера - это область, в которую помещается содержимое контейнера. Это может включать текст, изображения и другие элементы. "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Область контейнера, не содержащая содержимого, относится к частям контейнера, которые не содержат содержимого, таким как padding, borders, и margins. К этим областям также могут быть применены стили, но они не содержат никакого содержимого. Область без содержимого полезна для создания интервалов между контейнерами и краями веб-страницы."
        }
        ]
      },
      "lesson-study": {
        "lessonTitle": "Самостоятельная работа",
        "lessonDescription": "Используя демонстрационный макет, выполните CSS-стилизацию HTML-страницы, сделанной в прошлом задании.",
        "lessonContent": [
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Описание задания:"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__text"
            ],
            "textContent": "Используя демонстрационный макет, выполните CSS-стилизацию HTML-страницы, сделанной в прошлом задании."
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Ход работы:"
          },
          {
            "tag": "ol",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Внутри папки для выполнения работ “webtechs” создайте папку для выполнения третьей самостоятельной работы “project_3” и скопируйте в неё HTML-документ и папку с изображениями из папки “project_2”"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Внутри папки “project_3” разместите приложенный к заданию файл “expected_result_3.png”, создайте папку “css”, внутри которой создайте CSS-файл с именем “style.css”"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Ориентируясь на изображение “expected_result_3.png” выполните стилизацию HTML-документа, предварительно дополнив HTML-разметку необходимыми для этого элементами и атрибутами"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Селекторы должны быть созданы исключительно с использованием классов элементов"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Имена классов должны соответствовать смысловой нагрузке соответствующих элементов на странице и не должны включать в себя имена тегов."
              }
            ]
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Критерии оценивания:"
          },
          {
            "tag": "ul",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Структура папки соответствует заданию"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Внешний вид страницы, открытой в браузере, соответствует изображению “expected_result_3.png”"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Имена классов и селекторы выполнены в соответствии с заданием"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "W3C CSS Validation Service не указывает на ошибки"
              }
            ]
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Материалы для выполнения задания:"
          },
          {
            "tag": "ul",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://validator.w3.org/"
                    },
                    "textContent": "W3C Markup Validation Service"
                  }
                ]
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://jigsaw.w3.org/css-validator/"
                    },
                    "textContent": "W3C CSS Validation Service"
                  }
                ]
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://github.com/MypyMypy/MypyMypy.github.io/blob/main/herzen-project/public/lesson-materials/3-base-css/expected-result-css.png",
                      "download": "true",
                      "target": "_blank"
                    },
                    "textContent": "Скачать изображение ожидаемого результата работы"
                  }
                ]
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://github.com/MypyMypy/MypyMypy.github.io/blob/main/herzen-project/public/lesson-materials/3-base-css/img.zip",
                      "download": "true",
                      "target": "_blank"
                    },
                    "textContent": "Скачать архив с изображениями для выполнения работы"
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  },
  "page-html-css": {
    "id": 4,
    "title": "Продвинутый HTML & CSS",
    "moduleLinkHref": "/page?moduleName=page-html-css",
    "lessons": {
      "lesson-1": {
        "lessonTitle": "HTML5",
        "lessonDescription": "Lesson Descriotion",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "HTML5 - это последняя версия HTML (Hypertext Markup Language), стандартного языка разметки, используемого для создания веб-страниц. Это улучшение по сравнению с предыдущими версиями HTML и вводит новые элементы и атрибуты, которые облегчают создание более сложного, интерактивного и семантического веб-контента"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "HTML5 разработан таким образом, чтобы быть обратно совместимым с предыдущими версиями HTML, поэтому большинство существующего веб-контента должно работать в браузерах, поддерживающих HTML5. Он широко поддерживается современными веб-браузерами и используется для создания широкого спектра веб-приложений и контента"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Семантика HTML относится к значению и структуре элементов в HTML-документе. Это практика использования правильных HTML-элементов для разметки контента, чтобы придать ему смысл и структуру. Это позволяет поисковым системам и вспомогательным технологиям, таким как программы чтения с экрана, лучше понимать содержание веб-страницы и делает ее более доступной для пользователей. Примеры семантических элементов в HTML5 включают теги header, nav, article и section. Правильное использование этих тегов помогает создавать более значимые и доступные веб-страницы."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Семантические элементы HTML5 используются для описания структуры и значения содержимого веб-страницы. Эти элементы помогают поисковым системам и вспомогательным технологиям понять назначение контента, облегчая пользователям навигацию и понимание."
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<header>: Элемент заголовка представляет собой контейнер для вводного контента или набора навигационных ссылок. Обычно содержит логотип сайта, название сайта и основную навигацию."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<nav>: элемент навигации представляет собой раздел страницы, содержащий навигационные ссылки. Обычно используется для навигации по всему сайту, а не для навигации по конкретному контенту."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<main>: Основной элемент представляет основное содержание документа. Он должен быть уникальным для документа, исключая содержимое, которое повторяется в наборе документов, таких как верхние и нижние колонтитулы сайта и навигация."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<section>: Элемент раздела представляет тематическую группировку контента. Каждый раздел должен иметь заголовок, описывающий его содержание."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<article>: Элемент article представляет собой автономную композицию в документе, такую как сообщение в блоге, сообщение на форуме или новостная статья."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<aside>: элемент в стороне представляет раздел страницы, содержащий контент, который связан с основным контентом, но может рассматриваться отдельно от него. Примеры включают боковые панели, выдвижные кавычки и рекламу"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<footer>: элемент нижнего колонтитула представляет собой контейнер для нижнего колонтитула документа или раздела"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Помимо тегов для описания структуры страницы, в целях соблюдения семантических требований рекомендуются в подходящих случаях пользоваться следующими элементами:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Теги для списков включают <ol> (упорядоченный список) и <ul> (неупорядоченный список), а также <li> (элемент списка) для каждого отдельного элемента в списке."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Тег <time> используется для указания даты и/или времени в HTML-документе. Он также может быть использован для предоставления машиночитаемой информации о дате /времени для поисковых систем или других автоматизированных систем."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Тег <address> используется для предоставления контактной информации для автора или владельца документа и обычно отображается более мелким курсивным шрифтом."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Контентные изображения - это изображения, которые включены в содержимое веб-страницы, например изображения в абзаце текста или изображения, которые используются для иллюстрации точки зрения или концепции. Эти изображения обычно вставляются с помощью тега img в HTML и часто используются для дополнения текста на странице."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Фоновые изображения, с другой стороны, - это изображения, которые используются в качестве фона веб-страницы или определенного элемента на веб-странице. Эти изображения обычно задаются с помощью свойства background-image в CSS и могут использоваться для добавления визуального интереса или фирменного стиля на веб-страницу. "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В отличие от изображений содержимого, фоновые изображения обычно не являются частью основного содержимого страницы и обычно используются в декоративных целях."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Изображения SVG (масштабируемая векторная графика) могут быть изменены в HTML с использованием CSS и JavaScript. Исходя из этого, хоть и многие из них и выглядят как фоновые изображения, их все равно необходимо помещать в HTML-разметке в целях дальнейшей реализации взаимодействия с ними."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "С помощью CSS вы можете изменять цвет, размер и положение SVG-изображений, ориентируя их с помощью селекторов и используя такие свойства, как fill, height и width. Вы также можете использовать преобразования CSS для поворота, перекоса и масштабирования изображения."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Также возможно использовать CSS для изменения внешнего вида изображений SVG путем добавления классов или стилей к элементу, вы можете использовать селекторы CSS для таргетирования определенных элементов или групп элементов в изображении SVG и применения к ним стилей."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Получается, что вы можете использовать CSS и JavaScript, чтобы изменить внешний вид SVG-изображений в HTML, сделав их более динамичными и интерактивными."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Элемент picture в HTML используется для указания нескольких изображений для разных разрешений устройства и размеров экрана, в то время как элемент source используется внутри элемента picture для указания различных изображений, а атрибут srcset используется для указания различных источников изображений для элемента img. Это позволяет браузеру выбирать наиболее подходящее изображение для отображения в зависимости от устройства пользователя и размера экрана и может помочь повысить производительность веб-сайта за счет предоставления оптимизированных изображений меньшего размера на небольших устройствах."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Элемент <form> используется для создания формы на веб-странице. Это позволяет пользователям вводить данные, которые затем могут быть отправлены на сервер для обработки. Форма может включать в себя множество различных элементов формы, таких как текстовые поля, флажки, переключатели и многое другое."
        }
        ]
      },
      "lesson-2": {
        "lessonTitle": "Продвинутый CSS. Flexbox-верстка",
        "lessonDescription": "Lesson Descriotion",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Flex-модель - это режим компоновки в CSS, который позволяет размещать и выравнивать элементы гибким и отзывчивым способом."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Flex-контейнер - это родительский элемент, для которого задано значение display: flex или display: inline-flex. Затем этот элемент будет иметь возможность изменять расположение своих дочерних элементов, именуемых как flex-элементы."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Flex-элементы - это дочерние элементы гибкого контейнера. Их можно гибко и отзывчиво регулировать и выравнивать внутри контейнера."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Основная ось flex-контейнера - это ось, вдоль которой раскладываются flex-элементы. По умолчанию главной осью является горизонтальная ось (слева направо), но ее также можно установить на вертикальную ось (сверху вниз), используя свойство 'flex-direction'. Главная ось используется для выравнивания flex-элементов вдоль основного начального и основного конечного краев flex-контейнера. "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Поперечная ось flex-контейнера - это ось, проходящая перпендикулярно главной оси. Он используется для выравнивания flex-элементов вдоль оси, которая не является основной осью. Например, если для главной оси задано значение \"row\", поперечной осью будет \"column\"."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "По умолчанию flex-элементы должны располагаться вдоль главной оси flex-контейнера. Это означает, что по умолчанию элементы будут располагаться горизонтально, если для главной оси установлено значение \"row\", и вертикально, если для главной оси установлено значение \"column\". Кроме того, flex-элементы будут растянуты, чтобы заполнить доступное пространство вдоль поперечной оси, если для свойств flex-shrink или flex-basis не задано определенное значение."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Поведением flex-контейнера можно управлять с помощью свойств CSS, таких как flex-direction, flex-wrap и justify-content:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "flex-direction управляет направлением главной оси, которая определяет, как гибкие элементы размещаются в контейнере flex. Значение по умолчанию - row, что означает, что элементы расположены в горизонтальном ряду. Другими возможными значениями являются column (вертикальная компоновка), row-reverse (горизонтальная компоновка с элементами, расположенными в обратном порядке) и column-reverse (вертикальная компоновка с элементами, расположенными в обратном порядке)."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "flex-wrap определяет, будут ли flex-элементы принудительно помещены в одну строку или могут быть перенесены в несколько строк. Значение по умолчанию - nowrap означает, что элементы принудительно помещаются в одну строку. Другое возможное значение - wrap, которое позволяет переносить элементы в несколько строк."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "justify-content управляет выравниванием элементов flex по главной оси. Значение по умолчанию - flex-start, которое выравнивает элементы по началу главной оси. Другие возможные значения включают flex-end (выравнивает элементы по концу главной оси), center (выравнивает элементы по центру главной оси), space-between (распределяет пространство между элементами) и space-around (распределяет пространство вокруг элементов)."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "align-items управляет выравниванием flex-элементов по поперечной оси, которая перпендикулярна основной оси. Значение по умолчанию - stretch, которое растягивает элементы для заполнения flex-контейнера вдоль поперечной оси. Другие возможные значения включают flex-start (выравнивает элементы по началу поперечной оси), flex-end (выравнивает элементы по концу поперечной оси), center (выравнивает элементы по центру поперечной оси) и baseline (выравнивает элементы по их базовым линиям)"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "align-content управляет выравниванием нескольких строк элементов flex по поперечной оси, когда в flex-контейнере есть дополнительное пространство. Значение по умолчанию - stretch, которое растягивает элементы для заполнения гибкого контейнера вдоль поперечной оси. Другие возможные значения включают flex-start (выравнивает элементы по началу поперечной оси), flex-end (выравнивает элементы по концу поперечной оси), center (выравнивает элементы по центру поперечной оси), space-between (распределяет пространство между элементами) и space-вокруг (распределяет пространство вокруг предметов)."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Поведение flex-элемента относится к тому, как flex-элементы отображаются в flex-контейнере. Существует несколько свойств, которые можно использовать для управления поведением flex-элементов, в том числе:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "flex-grow: это свойство определяет, насколько flex-элемент будет расти по отношению к другим flex-элементам в контейнере. Для него может быть установлено значение от 0 до бесконечности со значением по умолчанию 0."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "flex-shrink: это свойство определяет, насколько flex-элемент будет сжиматься по отношению к другим flex-элементам в контейнере. Для него может быть установлено значение от 0 до бесконечности со значением по умолчанию 1."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Flex-basis: это свойство задает начальный размер flex-элемента. Для него может быть установлено такое значение, как \"auto\", \"content\" или определенная длина (например, \"20px\")."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "align-self: это свойство позволяет переопределить выравнивание flex-элемента по умолчанию вдоль поперечной оси контейнера. Он может быть установлен в \"auto\", \"stretch\", \"flex-start\", \"flex-end\" или \"center\"."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "order: это свойство позволяет изменять порядок flex-элементов в контейнере, независимо от исходного порядка в HTML. Он может быть установлен в значение от -бесконечности до бесконечности."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В дополнение к этим свойствам существует несколько сокращенных свойств, которые можно использовать для одновременной настройки нескольких свойств поведения flex-элементов, таких как 'flex' (который устанавливает flex-grow, flex-shrink и flex-basis) и 'align-items' (который устанавливает выравнивание всех flex-элементов предметы в контейнере вдоль поперечной оси)."
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ""
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ""
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ""
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ""
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ""
          }
          ]
        }
        ]
      },
      "lesson-3": {
        "lessonTitle": "Комбинаторные селекторы",
        "lessonDescription": "Lesson Descriotion",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Комбинаторные селекторы - это способ выбора элементов на основе их взаимосвязи с другими элементами в HTML-документе. Существует несколько типов комбинаторных селекторов:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Комбинаторный селектор \",\" используется для выбора нескольких элементов одновременно. Это позволяет вам применять одни и те же стили к нескольким элементам без необходимости повторять один и тот же CSS-код. Например, вы можете использовать селектор \"h1, h2, h3\", чтобы выбрать все элементы h1, h2 и h3 и применить ко всем из них одинаковые стили"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Комбинатор-потомок: Этот селектор используется для выбора всех элементов, которые являются потомками определенного элемента, независимо от того, насколько глубоко они вложены. Он представлен пробелом между элементами. Например, \"ul li\" будет выбирать все элементы \"li\", которые являются потомками элемента \"ul\""
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Дочерний комбинатор: Этот селектор используется для выбора элемента, который является прямым дочерним элементом другого элемента. Он представлен символом \">\". Например, \"ul > li\" будет выбирать все элементы \"li\", которые являются прямыми дочерними элементами элемента \"ul\"."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Комбинатор смежных элементов: Этот селектор используется для выбора элемента, которому непосредственно предшествует другой элемент. Он представлен символом \"+\". Например, \"h2 + p\" будет выбирать все элементы \"p\", которым непосредственно предшествует элемент \"h2\"."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Общий комбинатор родственных элементов: Этот селектор используется для выбора элементов, которым предшествует другой элемент, независимо от того, сколько других элементов находится между ними. Он представлен символом \"~\". Например, \"h2 ~ p\" будет выбирать все элементы \"p\", которым предшествует элемент \"h2\", даже если между ними есть другие элементы."
          }
          ]
        }
        ]
      },
      "lesson-4": {
        "lessonTitle": "Псевдоклассы",
        "lessonDescription": "Lesson Descriotion",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Псевдоклассы - это селекторы CSS, которые позволяют вам выбирать элементы на основе их состояния или поведения. Они используются путем добавления двоеточия (:), за которым следует псевдоклассовое имя к элементу, который вы хотите выбрать. "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Рассмотрим псевдоклассы состояния:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ":hover: выбирает элемент, когда пользователь наводит на него курсор мыши."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ":active: выбирает элемент при нажатии на него или его активации."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ":focus: выбирает элемент, когда он находится в фокусе, например, когда пользователь нажимает на него или вкладывает в него вкладки."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ":checked выбирает любой элемент, который находится в проверенном состоянии, например переключатель или флажок."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ":disabled выбирает любой элемент, который отключен, например ввод формы или кнопку."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ":valid выбирает любой элемент, который имеет допустимое значение в соответствии с его ограничениями, например, ввод формы с обязательным атрибутом."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ":invalid выбирает любой элемент, который имеет недопустимое значение в соответствии с его ограничениями, например, ввод формы с атрибутом шаблона, которому значение не соответствует."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Псевдоклассы для выбора элементов:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Псевдокласс :nth-child используется для выбора элементов на основе их положения внутри родительского элемента. Он принимает аргумент, такой как :nth-child(2), который будет выбирать второй дочерний элемент."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Псевдоклассы :first-child и :last-child похожи на :nth-child, но специально выбирают первый или последний дочерний элемент соответственно."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Псевдокласс :nth-last-child похож на :nth-child, но подсчитывает элементы с конца родительского элемента."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Псевдокласс :not() используется для исключения элементов, соответствующих данному аргументу, из выборки. Например, :not(:checked) выделит все элементы, которые в данный момент не проверены."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Псевдокласс \":nth-child\" может использоваться для выбора определенных элементов на основе их положения внутри родительского элемента, а псевдокласс \":not()\" может использоваться для исключения элементов, которые соответствуют определенному условию."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В CSS \"n\" в псевдоклассах \"nth-child\" и \"nth-last-child\" относится к положению элемента в группе элементов. Например, если у вас есть группа divs и вы хотите оформить третий div, вы должны использовать \"div:n-й дочерний элемент(3)\". Значение \"n\" также может быть формулой, такой как \"2n + 1\", которая будет нацелена на каждый нечетный элемент, начиная с первого. В случае \":not()\" значение \"n\" используется для указания того, какие элементы следует исключить из выборки. Например, чтобы выбрать все элементы li внутри ненумерованного списка, вы можете использовать следующий селектор: li:not(:last-child)."
        }
        ]
      },
      "lesson-study": {
        "lessonTitle": "Самостоятельная работа",
        "lessonDescription": "Создайте веб-страницу в соответствии с макетом. HTML-документ должен включать в себя верно подобранные семантические элементы.  ",
        "lessonContent": [
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Описание задания:"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__text"
            ],
            "textContent": "Создайте веб-страницу в соответствии с макетом. HTML-документ должен включать в себя верно подобранные семантические элементы.  "
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Ход работы:"
          },
          {
            "tag": "ol",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Внутри папки для выполнения работ “webtechs” создайте папку для выполнения четвертой самостоятельной работы “project_4”. Внутри неё разместите приложенную к заданию папку с изображениями и изображения “expected_result_4_html” и “expected_result_4_css”, создайте HTML-документ с именем “index.html”; папку css, внутри которой создайте CSS-файл с именем “style.css”."
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Ориентируясь на изображение “expected_result_4_html.png” выполните разметку в HTML-документе, используя семантические теги"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Ориентируясь на изображение “expected_result_4_css.png” выполните стилизацию страницы с использованием CSS-Flexbox"
              }
            ]
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Критерии оценивания:"
          },
          {
            "tag": "ul",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "HTML-документ должен включать в себя верно подобранные семантические элементы. "
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "При стилизации страницы используется CSS-Flexbox"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Правило display: flex имеют только элементы, которым это необходимо"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Внешние отступы между элементами должны быть реализованы с использованием CSS-псевдоклассов."
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Интерактивные элементы должны иметь анимацию."
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "W3C Markup Validation Service не указывает на ошибки"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "W3C CSS Validation Service не указывает на ошибки"
              }
            ]
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Материалы для выполнения задания:"
          },
          {
            "tag": "ul",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://validator.w3.org/"
                    },
                    "textContent": "W3C Markup Validation Service"
                  }
                ]
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://jigsaw.w3.org/css-validator/"
                    },
                    "textContent": "W3C CSS Validation Service"
                  }
                ]
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://github.com/MypyMypy/MypyMypy.github.io/blob/main/herzen-project/public/lesson-materials/4-html-css/expected-result-html-css.png",
                      "download": "true",
                      "target": "_blank"
                    },
                    "textContent": "Скачать изображение ожидаемого результата работы"
                  }
                ]
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://github.com/MypyMypy/MypyMypy.github.io/blob/main/herzen-project/public/lesson-materials/4-html-css/img.zip",
                      "download": "true",
                      "target": "_blank"
                    },
                    "textContent": "Скачать архив с изображениями для выполнения работы"
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  },
  "page-js": {
    "id": 5,
    "title": "Основы JavaScript. Введение в DOM",
    "moduleLinkHref": "/page?moduleName=page-js",
    "lessons": {
      "lesson-1": {
        "lessonTitle": "Введение в JavaScript",
        "lessonDescription": "Lesson Descriotion",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "JavaScript - это язык программирования, который в основном используется для создания интерактивных и динамичных веб-сайтов. Это позволяет разработчикам создавать веб-страницы, которые могут обновляться без необходимости обновления страницы, создавать интерактивные формы, а также создавать анимацию и другие визуальные эффекты. Код JavaScript обычно выполняется в браузере, хотя он также может быть использован на стороне сервера с использованием таких технологий, как Node.js. Он часто используется в сочетании с HTML и CSS для создания сложных веб-приложений. JavaScript - популярный и широко используемый язык, и существует множество доступных библиотек и фреймворков, которые можно использовать для ускорения и упрощения разработки."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": ""
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Компилятор - это программа, которая преобразует исходный код, написанный на одном языке программирования (исходный язык), в другой язык (целевой язык). Компиляторы обычно используются для перевода исходного кода, написанного на языке программирования высокого уровня, таком как C или C++, в машинный код, который может выполняться непосредственно центральным процессором компьютера (CPU)."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Интерпретатор, с другой стороны, - это программа, которая читает и выполняет код, написанный на языке программирования высокого уровня, таком как JavaScript или Python, построчно во время выполнения. Интерпретаторы не создают машинный код, а вместо этого непосредственно выполняют инструкции в исходном коде. Это означает, что код, написанный на интерпретируемом языке, может выполняться медленнее, чем скомпилированный код."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "JavaScript считается языком общего назначения, поскольку он может использоваться для выполнения широкого спектра задач и может быть интегрирован с множеством других технологий. Его можно использовать для создания интерактивных пользовательских интерфейсов, разработки веб- и мобильных приложений, создания серверных сценариев, обработки данных и манипулирования ими и многого другого. Кроме того, JavaScript имеет большое и активное сообщество, что означает, что разработчикам доступно множество библиотек, фреймворков и инструментов, которые помогут им создавать и реализовывать свои идеи. Он также прост в освоении и использовании, что означает, что он доступен широкому кругу разработчиков с разным уровнем квалификации."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "JavaScript обычно используется в веб-браузерах для добавления интерактивности и динамической функциональности веб-сайтам. Когда веб-страница загружается, браузер создает объектную модель документа (DOM) для страницы, которая представляет собой древовидную структуру, представляющую структуру элементов HTML и XML на странице. JavaScript можно использовать для управления DOM, позволяя разработчикам создавать интерактивные элементы, такие как выпадающие меню, ползунки изображений и проверка формы. JavaScript также можно использовать для того, чтобы сделать веб-страницы более отзывчивыми и динамичными, обновляя содержимое страницы и макет в ответ на взаимодействие с пользователем, не требуя полной перезагрузки страницы. Это обеспечивает более плавный пользовательский интерфейс и может повысить производительность веб-страниц."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Изоморфизм в JavaScript относится к способности запускать код JavaScript как на стороне клиента (в веб-браузере), так и на стороне сервера (используя среду выполнения JavaScript, такую как Node.js ). Это обеспечивает возможность повторного использования кода и согласованный опыт разработки как в интерфейсе, так и в серверной части. Изоморфные приложения JavaScript также могут повысить производительность, отображая начальное состояние веб-страницы на сервере, а затем позволяя клиенту взять управление на себя вместо того, чтобы полагаться исключительно на рендеринг на стороне клиента. Это может привести к более быстрому времени загрузки и улучшению пользовательского опыта."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript переменные используются для хранения значений. Переменные объявляются с использованием ключевого слова \"var\", \"let\" или \"const\". "
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "let позволяет объявлять переменные с одинаковым именем в одной и той же области видимости и повторно присваивать им значения. "
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "const также позволяет вам объявлять переменные с одинаковым именем в одной и той же области видимости, но вы не можете повторно присваивать им значения."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "var имеет переменные с функциональной областью действия, которые могут привести к неожиданному поведению при использовании в циклах и замыканиях. Кроме того, переменные var выводятся в верхнюю часть своей области видимости, что может привести к путанице при работе с переменными, которые определены позже в коде."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Обычно рекомендуется избегать использования ключевого слова var при объявлении переменных в JavaScript, поскольку оно имеет некоторые ограничения и может привести к неожиданному поведению в определенных ситуациях. Вместо этого рекомендуется использовать ключевые слова let или const для объявления переменных."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Таким образом, в современной разработке JavaScript лучше использовать let и const вместо var."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Переменным присваиваются значения с помощью оператора присваивания (=). Например, let x = 5; объявляет переменную с именем x и присваивает ей значение 5. Переменные могут содержать любой тип данных, такой как числа, строки, логические значения, массивы и объекты."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript существует несколько математических операторов, которые можно использовать для выполнения арифметических операций:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Сложение (+)"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Вычитание (-)"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Умножение (*)"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Деление (/)"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Остаток (%)"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Возведение в степень (**)"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Унарное отрицание (-)"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "Унарный плюс (+)"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Эти операторы могут использоваться для выполнения основных арифметических операций, таких как сложение, вычитание, умножение и деление. Оператор остатка (%) возвращает остаток от операции деления, в то время как оператор возведения в степень (**) возводит число в указанную степень. Операторы унарного отрицания (-) и унарного плюса (+) могут использоваться для изменения знака числа."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Например, вы можете использовать оператор сложения (+) для сложения двух чисел вместе:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let x = 5;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let y = 3;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let sum = x + y;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(sum); // Output: 8"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Аналогично, вы можете использовать оператор вычитания (-) для вычитания одного числа из другого:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let x = 5;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let y = 3;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let difference = x - y;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(difference); // Output: 2"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Присваивание с операцией - это когда оператор используется в операторе присваивания. Например: \"x += 5\" эквивалентно \"x = x + 5\". Это также может быть использовано с другими математическими операторами, такими как \"-=\", \"*=\", \"/=\", и т.д."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Это сокращенное обозначение, и оно обычно используется для обновления переменных, таких как счетчики, или для добавления / удаления значений из массива."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript вы можете сравнивать числа, используя следующие операторы:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "> (больше, чем)"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "< (меньше, чем)"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ">= (больше или равно)"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "<= (меньше или равно)"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "== (равно)"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "!= (не равно)"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Результат сравнения может принимать значения true и false."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Например:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let x = 5;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let y = 10;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(x > y); // false"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(x < y); // true"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(x >= y); // false"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(x <= y); // true"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(x == y); // false"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(x != y); // true"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Важно отметить, что оператор равенства (==) выполняет приведение к типу, что означает, что он преобразует операнды в один и тот же тип перед выполнением сравнения. Это может привести к неожиданным результатам. Например:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "console.log(1 == '1'); // true"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Рекомендуется использовать оператор строгого равенства ===, который сравнивает как значение, так и тип операндов."
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "console.log(1 === '1'); // false"
        }
        ]
      },
      "lesson-2": {
        "lessonTitle": "Типы данных",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript типы данных относятся к типу значения, которое содержит переменная. В JavaScript существует шесть основных типов данных: number, string, boolean, null, undefined и symbol."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "От типа данных определяется, какими возможными значениями может обладать переменная и какой набор операций может быть выполнен с этими значениями."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Например, тип данных Number представляет числовое значение и может использоваться в математических операциях, в то время как тип данных String представляет последовательность символов и может использоваться в операциях манипулирования строками. Понимание типов данных и их возможностей важно для написания эффективного кода JavaScript."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript строка - это последовательность символов, представляющих текст. Строки могут быть созданы с использованием одинарных, двойных кавычек или обратных кавычек. Например:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "let message = \"Hello, World!\";"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript обратные кавычки (`) можно использовать для создания шаблонного литерала, который позволяет использовать заполнители (обозначаемые ${}) внутри строки. Это позволяет легко вставлять переменные или выражения в строку без необходимости конкатенации. Например:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let name = \"John\";"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(`My name is ${name}`); // Output: My name is John"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Обратные кавычки также позволяют использовать многострочные строки, например:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let multiLine = `this is "
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "a multiline"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "string`;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(multiLine);"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Результат будет следующим:"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "--this is "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "--a multiline"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "--string"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Это также полезно, когда вы хотите включить специальные символы в строку, например новую строку, без необходимости экранировать их."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript оператор + может использоваться для объединения двух строк вместе (операция конкатенации). Например:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let string1 = \"Hello\";"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let string2 = \"World\";"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let combinedString = `${string1} ${string2}`; // \"Hello World\""
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Это позволяет вам вставлять выражения внутри строковых литералов, что особенно полезно, когда вам нужно создавать строки, включающие динамические значения."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript строки имеют встроенный набор методов, которые можно использовать для манипулирования строковыми значениями и работы с ними. Некоторые распространенные строковые методы включают:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "length: возвращает количество символов в строке"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "toUpperCase(): преобразует все символы в строке в верхний регистр"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "toLowerCase(): преобразует все символы в строке в строчную"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "substring(начало, конец): возвращает новую строку, которая является частью исходной строки, начиная с указанного начальный индекс и заканчивающийся перед указанным конечным индексом"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "indexOf(substring): возвращает индекс первого вхождения указанной подстроки в строке"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "lastIndexOf(substring): возвращает индекс последнего вхождения указанной подстроки в строке"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "replace(old, new): заменяет все вхождения указанной старая строка с указанной новой строкой"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "split(символ-разделитель): разбивает строку на массив подстрок на основе указанного разделителя"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "trim(): удаляет пробелы из начала и конца строки"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "substr(start, end): используется для извлечения части строки, начинающейся с указанного индекса и продолжающейся в течение указанного количества символов"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "indexOf(searchValue, start): используется для поиска первого вхождения указанного значения в строке. Синтаксис для этого метода следующий: Метод возвращает индекс первого вхождения поискового значения или -1, если значение не найдено."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript тип данных Boolean используется для представления значений true или false. Логические значения часто используются в условных операторах, таких как циклы \"if\" и \"while\", чтобы определить, выполняется ли определенное условие. Например, если переменной с именем \"isRainy\" присвоено значение true, то оператор \"if\" может выполнить код для отображения значка зонтика на веб-сайте. Логические значения могут быть созданы с помощью конструктора Boolean() или с использованием литералов true и false. Они также возвращаются с помощью сравнения и логических операторов, таких как === и &&."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "При сравнении переменных разных типов переменные сначала преобразуются в общий тип перед выполнением сравнения. "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Например, при сравнении строки с числом строка будет преобразована в число перед выполнением сравнения. Это означает, что \"2\" == 2 вернет значение true, потому что строка \"2\" сначала преобразуется в число 2 перед выполнением сравнения."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Аналогично, при сравнении логического значения с не-логическим значением не-логическое значение будет преобразовано в логическое значение перед выполнением сравнения. Это означает, что true == 1 вернет значение true, поскольку число 1 сначала преобразуется в логическое значение true перед выполнением сравнения."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Важно иметь в виду, что принуждение к типу может привести к неожиданным результатам при сравнении переменных, поэтому, как правило, лучше всего убедиться, что сравниваемые переменные имеют один и тот же тип, прежде чем проводить сравнение."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript сравнение строк выполняется с использованием реляционных операторов, таких как <, >, <=, >=, и ==. При сравнении строк сравнение основано на значениях кодовых точек Юникода для каждого символа в строках. Это означает, что считается, что заглавные буквы имеют меньшее значение кодовой точки, чем строчные буквы, поэтому строка, содержащая 'A', будет считаться меньшей, чем строка, содержащая 'a'."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Также важно отметить, что строки сравниваются посимвольно слева направо, и если одна строка является префиксом другой, более короткая строка будет считаться меньше, чем более длинная. Кроме того, JavaScript имеет встроенный метод localeCompare(), который позволяет сравнивать строки на основе текущей локали, что учитывает языковые правила сортировки и сравнения строк."
        }
        ]
      },
      "lesson-3": {
        "lessonTitle": "Условные операторы",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Условные операторы используются в JavaScript для выполнения различных действий на основе определенных условий. Наиболее часто используемыми условными выражениями являются:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": [{
              "tag": "p",
              "classes": [
                "lesson__text"
              ],
              "textContent": "Оператор if: этот оператор используется для проверки условия, и если он принимает значение true, выполняется блок кода."
            },
            {
              "tag": "code",
              "classes": [
                "lesson__code"
              ],
              "textContent": [{
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "if (condition) {"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "// code to be executed if condition is true"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "}"
              }
              ]
            }
            ]
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": [{
              "tag": "p",
              "classes": [
                "lesson__text"
              ],
              "textContent": "Оператор if-else: этот оператор используется для проверки условия, и если он принимает значение true, выполняется блок кода, в противном случае выполняется альтернативный блок кода."
            },
            {
              "tag": "code",
              "classes": [
                "lesson__code"
              ],
              "textContent": [{
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "if (condition) {"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "// code to be executed if condition is true"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "} else {"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "// code to be executed if condition is false"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "}"
              }
              ]
            }
            ]
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": [{
              "tag": "p",
              "classes": [
                "lesson__text"
              ],
              "textContent": "Оператор switch: этот оператор используется для выполнения различных действий, основанных на различных условиях. Он используется, когда требуется проверить несколько условий."
            },
            {
              "tag": "code",
              "classes": [
                "lesson__code"
              ],
              "textContent": [{
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "switch (expression) {"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "case value1:"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "// code to be executed if expression equals value1"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "break;"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "case value2:"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "// code to be executed if expression equals value2"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "break;"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": " ..."
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "  default:"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "// code to be executed if expression does not match any case"
              },
              {
                "tag": "p",
                "classes": [
                  "lesson__code-line"
                ],
                "textContent": "}"
              }
              ]
            }
            ]
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Во всех этих случаях условия выражаются в форме выражений, которые оцениваются либо как true, либо как false. Эти утверждения очень полезны при принятии решений, основанных на значении определенных переменных или результатах определенных вычислений."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Тернарный оператор - это сокращенный способ написания простого оператора if-else в JavaScript. Общий синтаксис таков:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "result = x > y ? \"x is greater than y\" : \"x is not greater than y\";"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Это сокращение для оператора if-else, он проверяет условие, указанное в начале, если оно верно, то возвращает значение перед двоеточием (:), в противном случае оно возвращает значение после двоеточия."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript логические операторы используются для выполнения логических операций над логическими значениями. Среди них:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "&& (логическое И): возвращает значение true, если оба операнда имеют значение true."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "|| (Логическое ИЛИ): возвращает значение true, если любой из операндов имеет значение true."
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "! (Логическое НЕТ): инвертирует логическое значение операнда."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Пример:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let x = true;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let y = false;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(x && y); // Output: false"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(x || y); // Output: true"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(x || y); // Output: true"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Эти операторы часто используются в условных операторах и циклах для управления потоком программы на основе определенных условий."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript логические операторы имеют определенный порядок приоритета. Оператор \"&&\" имеет более высокий приоритет, чем \"||\". Это означает, что выражения, использующие \"&&\", будут вычисляться первыми, перед выражениями, использующими \"||\". Оператор \"!\", который отрицает логическое значение, имеет наивысший приоритет из всех логических операторов и будет вычислен первым. Это может повлиять на результат условного оператора, если логические операторы используются неправильно. Чтобы избежать путаницы, лучше всего использовать круглые скобки для группировки выражений с разным приоритетом и прояснения логики утверждения."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Пример использования логических операторов в условном операторе:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let age = 25;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let isStudent = true;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "if (age > 21 && !isStudent) {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(\"Welcome to the bar!\");"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "} else {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(\"Sorry, you are not old enough or you are a student.\");"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "}"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В этом примере логический оператор && используется для проверки, если значение переменной age больше 21, а значение переменной isStudent равно false. Если оба условия верны, блок кода в инструкции if будет выполнен. Если любое из условий равно false, будет выполнен блок кода в инструкции else. Логический оператор ! используется для проверки, является ли значение переменной isStudent ложным. Оператор ! отрицает значение переменной isStudent, поэтому, если ее значение равно true, оно будет преобразовано в false и наоборот."
        }
        ]
      },
      "lesson-4": {
        "lessonTitle": "Массивы",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript массив (также называемый array) - это тип переменной, которая может хранить несколько значений. Эти значения могут быть любого типа, включая числа, строки, объекты и другие массивы. Вы можете получить доступ к значениям в массиве и манипулировать ими, используя такие методы, как push, pop, shift, unshift и indexOf. Значения в массиве также упорядочены, поэтому вы можете получить к ним доступ по их позиции или индексу. Учитываем, что индекс первого элемента как и во многих других языках программирования начинается с 0, а не с 1."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Синтаксис для создания массива следующий:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "let myArray = [element1, element2, element3];"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Вы также можете создать пустой массив, используя следующий синтаксис:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": "let myArray = [];"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Помимо вы можете использовать “new Array(element1, element2, element3)” или “new Array(number)” для создания массива со значениями или пустого с определенной длиной соответственно."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Существует несколько встроенных методов, доступных для массивов в JavaScript, некоторые из наиболее распространенных из них включают:"
        },
        {
          "tag": "div",
          "classes": [
            "lesson__table"
          ],
          "textContent": [{
            "tag": "div",
            "classes": [
              "lesson__table-row"
            ],
            "textContent": [{
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "push(): добавляет элемент в конец массива"
            },
            {
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "indexOf(): возвращает первый индекс, по которому данный элемент может быть найден в массиве, или -1, если он отсутствует"
            }
            ]
          },
          {
            "tag": "div",
            "classes": [
              "lesson__table-row"
            ],
            "textContent": [{
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "pop(): удаляет последний элемент из массива"
            },
            {
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "lastIndexOf(): возвращает последний индекс, по которому данный элемент может быть найден в массиве, или -1, если он отсутствует."
            }
            ]
          },
          {
            "tag": "div",
            "classes": [
              "lesson__table-row"
            ],
            "textContent": [{
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "shift(): удаляет первый элемент из массива"
            },
            {
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "forEach(): выполняет предоставленную функцию один раз для каждого элемента массива."
            }
            ]
          },
          {
            "tag": "div",
            "classes": [
              "lesson__table-row"
            ],
            "textContent": [{
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "unshift(): добавляет элемент в начало массива"
            },
            {
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "map(): создает новый массив с результатами вызова предоставленной функции для каждого элемента в вызывающем массиве"
            }
            ]
          },
          {
            "tag": "div",
            "classes": [
              "lesson__table-row"
            ],
            "textContent": [{
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "splice(): может добавлять или удалять элементы из указанного позиция в"
            },
            {
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "filter(): создает новый массив со всеми элементами, которые проходят тест, реализованный предоставленной функцией"
            }
            ]
          },
          {
            "tag": "div",
            "classes": [
              "lesson__table-row"
            ],
            "textContent": [{
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "slice(): возвращает новый массив, который является копией части исходного массива"
            },
            {
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "reduce(): применяет функцию к аккумулятору и каждому элементу в массиве (слева направо), чтобы свести его к одному значению"
            }
            ]
          },
          {
            "tag": "div",
            "classes": [
              "lesson__table-row"
            ],
            "textContent": [{
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "join(): преобразует все элементы массива в строку и объединяет их с указанным разделителем"
            },
            {
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "findIndex(): возвращает индекс первого элемента в предоставленном массиве, который удовлетворяет предоставленной функции тестирования"
            }
            ]
          },
          {
            "tag": "div",
            "classes": [
              "lesson__table-row"
            ],
            "textContent": [{
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "sort(): сортирует элементы массива в порядке возрастания или убывания"
            },
            {
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "every(): возвращает true, если каждый элемент в этом массиве удовлетворяет предоставленной функции тестирования."
            }
            ]
          },
          {
            "tag": "div",
            "classes": [
              "lesson__table-row"
            ],
            "textContent": [{
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "reverse(): изменяет порядок элементов в массиве на противоположный"
            },
            {
              "tag": "div",
              "classes": [
                "lesson__table-cell"
              ],
              "textContent": "some(): возвращает значение true, если хотя бы один элемент в этом массиве удовлетворяет предоставленной функции тестирования."
            }
            ]
          }
          ]
        }
        ]
      },
      "lesson-5": {
        "lessonTitle": "Циклы",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Циклы в JavaScript используются для многократного выполнения блока кода до тех пор, пока не будет выполнено определенное условие. Они полезны для перебора массивов, выполнения повторяющихся задач и многих других вариантов использования. Также использование циклов может помочь вам написать более эффективный и менее повторяющийся код. Например, если вам нужно выполнить итерацию по всем элементам массива, вы можете использовать для этого цикл for, вместо того чтобы писать отдельный код для каждого элемента. Кроме того, циклы полезны для многократного выполнения одного и того же кода с разными входными данными или в разных условиях."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Два основных типа циклов в JavaScript - это цикл for и цикл while. Цикл for используется для перебора последовательности чисел или элементов в массиве, в то время как цикл while используется для повторного выполнения блока кода до тех пор, пока выполняется определенное условие. Также существуют и другие синтаксические варианты создания циклов, которые мы также рассмотрим."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Цикл \"for\" в JavaScript - это оператор потока управления, который позволяет вам повторять определенный блок кода заданное количество раз. Синтаксис для цикла \"for\" выглядит следующим образом:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "for (initialization; condition; final-expression) {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "  // code to be executed"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "}"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "\"initialization\" выполняется один раз в начале цикла и устанавливает начальное значение для счетчика цикла. \"condition\" вычисляется перед каждой итерацией цикла, и если оно истинно, блок кода внутри цикла выполняется. \"final-expression\" выполняется в конце каждой итерации и обычно используется для увеличения или уменьшения счетчика цикла."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Базовым примером цикла for в JavaScript может быть:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "for (let i = 0; i < 5; i++) {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(i);"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "}"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Этот цикл начнется со значения i, равного 0, и будет продолжаться до тех пор, пока i больше не будет меньше 5. На каждой итерации цикла значение i увеличивается на 1 (i++), и текущее значение i записывается в консоль. Результатом будут числа от 0 до 4, которые будут занесены в консоль."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Цикл for of является новым дополнением к циклическим конструкциям JavaScript и используется для перебора значений итеративного объекта, такого как массив или строка. Синтаксис для цикла for of выглядит следующим образом:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "for (let value of iterable) {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "  // code to be executed"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "}"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Здесь iterable - это объект, над которым мы хотим выполнить итерацию, а value - это переменная, которая будет содержать текущее значение в iterable на каждой итерации. Например, для перебора массива чисел мы могли бы использовать следующий код:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let numbers = [1, 2, 3, 4, 5];"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "for (let number of numbers) {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(number);"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "}"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Это позволит вывести на консоль числа 1, 2, 3, 4 и 5."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Цикл for of полезен, когда вы хотите выполнить итерацию по значениям массива или другого итеративного объекта, и вам не нужно знать индекс текущего значения. Это также полезно, когда вы хотите выполнить итерацию по символам строки."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Цикл for-in - это оператор цикла в JavaScript, который позволяет вам выполнять итерации по свойствам объекта. Обычно он используется для перебора свойств объекта, а не массива. Цикл for-in будет выполнять итерацию по свойствам объекта в произвольном порядке. Цикл будет продолжаться до тех пор, пока он не повторит все свойства объекта. Синтаксис для цикла for-in выглядит следующим образом: "
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "for (var property in object) {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "    // code to be executed for each property"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "}"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Это позволит вывести на консоль числа 1, 2, 3, 4 и 5."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Цикл for of полезен, когда вы хотите выполнить итерацию по значениям массива или другого итеративного объекта, и вам не нужно знать индекс текущего значения. Это также полезно, когда вы хотите выполнить итерацию по символам строки."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Цикл for-in — это оператор цикла в JavaScript, который позволяет вам выполнять итерации по свойствам объекта. Обычно он используется для перебора свойств объекта, а не массива. Цикл for-in будет выполнять итерацию по свойствам объекта в произвольном порядке. Цикл будет продолжаться до тех пор, пока он не повторит все свойства объекта. Синтаксис для цикла for-in выглядит следующим образом: "
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "for (const property in object) {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "    // code to be executed for each property"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "}"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Где \"property\" - это переменная, которая будет содержать текущее имя свойства, а \"object\" - это объект, по которому вы хотите выполнить итерацию."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Основным примером использования цикла \"for in\" в JavaScript может быть следующий:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let object = {a: 1, b: 2, c: 3};"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "for (let key in object) {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(key + \":\" + object[key]);"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "}"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Этот код создает объект с тремя свойствами, \"a\", \"b\" и \"c\", и присваивает им значения 1, 2 и 3 соответственно. Затем цикл for in выполняет итерацию по каждому свойству объекта и записывает ключ и соответствующее значение в консоль. Результатом было бы:"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "--a: 1"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "--b: 2"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "--c: 3"
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Важно отметить, что цикл \"for in\" используется для перебора свойств объекта, в то время как цикл \"for of\" используется для перебора элементов массива или других повторяющихся объектов."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Важно отметить, что использование цикла for-in для перебора массива может привести к неожиданному поведению, поскольку цикл будет перебирать все перечислимые свойства."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Цикл \"while\" в JavaScript используется для многократного выполнения блока кода до тех пор, пока выполняется определенное условие. Основной синтаксис для цикла while таков:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "while (condition) {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "// code to be executed"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "}"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Условие вычисляется перед каждой итерацией цикла, и, если оно истинно, блок кода выполняется. Как только условие становится ложным, цикл завершается, и выполнение кода продолжается со следующей инструкцией после цикла."
        }
        ]
      },
      "lesson-6": {
        "lessonTitle": "Функции",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript функция - это блок кода, который может быть повторно использован несколько раз. Функции определяются с помощью ключевого слова \"function\", за которым следует название функции и набор круглых скобок, которые могут включать параметры. Код внутри функции заключен в фигурные скобки. Функции могут быть вызваны с помощью имени функции, за которым следуют круглые скобки, которые могут включать аргументы."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Пример:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "function greet(name) {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(\"Hello\" + name);"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "}"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "greet(\"John\"); // Output: \"Hello John\""
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В этом примере функция \"greet\" принимает один параметр \"name\" и записывает приветствие в консоль, используя значение параметра. Затем функция вызывается с аргументом \"John\", в результате чего выводится \"Hello John\"."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Function expression (объявление функции с помощью переменной или же “анонимная” функция) - это способ определения функции в JavaScript. Это функция, которая присваивается переменной, такой как:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let myFunction = function() {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(\"Hello World\");"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "}"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Данное выражение отличается от function declaration (функция, объявленная с помощью ключевого слова “funtion” или же “именованная” функция), которое определяется с помощью ключевого слова function, за которым следует имя функции, например:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "function myFunction() {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(\"Hello World\");"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "}"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Function expression могут использоваться в качестве аргумента при вызове другой функции, могут быть сохранены в переменной, переданы другой функции или возвращены из функции."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Основное различие между function declaration и function expression заключается в том, что function declaration загружаются при выполнении кода заранее, что означает, что они могут быть вызваны до того, как они будут определены, тогда как function expression не загружаются, отчего переменная должна быть определена до ее вызова."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Функция может принимать один или несколько аргументов. Аргументы - это значения, передаваемые функции при ее вызове. Эти значения затем используются внутри функции для выполнения желаемой операции. Количество аргументов и типы аргументов, которые может принимать функция, определяются определением функции. Например, функция, которая вычисляет площадь прямоугольника, может принимать два аргумента: ширину и высоту прямоугольника. Затем функция может использовать эти аргументы для выполнения вычисления."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "undefined - это специальное значение, которое используется для указания на то, что переменная была объявлена, но ей не было присвоено значение. Это также значение по умолчанию для параметров функции, если значение не передается."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "null - это значение, которое не представляет никакого значения или объекта. Он часто используется для указания на то, что объект или переменная не должны иметь значения. Оно отличается от undefined тем, что это значение, которое явно присваивается переменной или свойству, тогда как undefined - это значение по умолчанию для неинициализированных переменных или свойств."
        }
        ]
      },
      "lesson-7": {
        "lessonTitle": "Объекты",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В JavaScript объект - это набор свойств, где каждое свойство имеет имя и значение. Свойства могут быть любого типа данных, включая другие объекты. Объекты создаются с помощью фигурных скобок {} и часто используются для моделирования объектов реального мира или структур данных. Они могут использоваться для хранения данных, методов и функций. Объекты также могут быть использованы для создания сложных структур данных, таких как массивы, наборы, карты и т.д. Объекты могут быть созданы с использованием обозначения объектных литералов, обозначения конструктора и object.create(). Кроме того, JavaScript также предоставляет ряд встроенных объектов, таких как Math, Date, Array и String, которые имеют свои собственные свойства и методы, которые можно использовать для выполнения общих задач."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Объекты используются для хранения пар ключ-значение и могут быть созданы с использованием обозначения литерала объекта, в котором используются фигурные скобки {}. Свойства и методы можно добавить к объекту, указав имя свойства, за которым следует двоеточие, и значение, например:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let myObject = {"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "property1: value1,"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "property2: value2,"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "method1: function() { // code },"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "method2: function() { // code }"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "};"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Свойства и методы также могут быть добавлены к объекту после его создания, используя обозначение точками или скобками:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "myObject.property3 = value3;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "myObject['property4'] = value4;"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Доступ к свойствам и методам можно получить, используя одни и те же обозначения:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let prop1 = myObject.property1;"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let prop2 = myObject['property2'];"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "myObject.method1();"
          }
          ]
        }
        ]
      },
      "lesson-8": {
        "lessonTitle": "Введение в DOM",
        "lessonDescription": "",
        "lessonContent": [{
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Объектная модель документа (DOM) - это программный интерфейс для HTML- и XML-документов. Он представляет структуру документа в виде дерева узлов, где каждый узел представляет элемент или текстовое содержимое документа. Это позволяет разработчикам получать доступ к содержимому, структуре и стилю веб-страницы и манипулировать ими с помощью такого языка программирования, как JavaScript. Он используется для создания динамических веб-страниц, которые могут обновляться и изменяться в зависимости от взаимодействия пользователя или других событий."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "DOM генерируется браузером, когда он анализирует HTML или XML-документ. Браузер преобразует HTML/XML-код в древовидную структуру, где каждый элемент, атрибут и текстовое содержимое представлены в виде узла. Эта древовидная структура и есть DOM."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "DOM HTML относится к HTML-коду, который браузер анализирует для создания DOM. DOM JS относится к коду JavaScript, который может быть использован для взаимодействия с DOM. С помощью DOM JS вы можете получать доступ к элементам, атрибутам и текстовому содержимому документа и изменять их, а также добавлять новые элементы и удалять существующие. Помимо этого, с помощью JS разработчик может изменять содержимое DOM, добавляя или удаляя его элементы."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В DOM API доступно множество различных методов для доступа к элементам документа и управления ими, таких как:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ".createElement(), который создает новый элемент"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ".append(), который добавляет элемент в качестве последнего дочернего элемента родительского элемента"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ".prepend(), который добавляет элемент в качестве первого дочернего элемента родительского элемента"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ".before(), который добавляет элемент перед указанным элементом"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ".after(), который добавляет элемент элемент после указанного элемента"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ".children, которые возвращают коллекцию всех дочерних элементов элемента"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ".replaceWith(), который заменяет элемент другим элементом"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ".remove(), который удаляет элемент из документа"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ".innerHTML, который получает или устанавливает содержимое HTML внутри элемента"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ".textContent, который получает или задает текстовое содержимое внутри элемента"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Свойство .classlist - это объект, представляющий атрибут class элемента HTML. Это позволяет вам манипулировать классами элемента в JavaScript. Ниже приведены некоторые из методов, доступных для объекта classlist:"
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ".add(className) - добавляет класс к элементу"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ".remove(className) - удаляет класс из элемента"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ".toggle(className) - добавляет класс, если он не существует, или удаляет его, если он"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": ".contains(className) - возвращает логическое значение, указывающее, имеет ли элемент указанный класс."
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Существует также множество способов выбора элементов в DOM, таких как .querySelector(), который выбирает первый элемент, соответствующий указанному селектору CSS, .querySelectorAll(), который выбирает все элементы, соответствующие указанному селектору CSS, и .getElementById(), который выбирает элемент с указанным идентификатором."
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Действие пользователя - любое взаимодействие, которое пользователь инициирует с веб-сайтом или приложением. Может включать в себя такие вещи, как нажатие на кнопки, ввод текста в поля формы, прокрутка страницы или наведение курсора на элементы. "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "События в JavaScript относятся к действиям или вхождениям, которые происходят в браузере, таким как нажатие пользователем кнопки, наведение курсора мыши на элемент или завершение загрузки страницы. Эти события можно \"прослушивать\" и \"отвечать на них\" с помощью прослушивателей событий в JavaScript. У каждого из событий есть название. Примеры: "
        },
        {
          "tag": "ul",
          "classes": [
            "lesson__list"
          ],
          "textContent": [{
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "click"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "mouseover"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "mouseout"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "submit"
          },
          {
            "tag": "li",
            "classes": [
              "lesson__list-item"
            ],
            "textContent": "change"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Обработка событий в JavaScript относится к процессу реагирования на события, происходящие в браузере, такие как нажатие кнопки, отправка формы или загрузка страницы. Обычно это делается с помощью прослушивателей событий, которые представляют собой функции, настроенные на прослушивание определенных событий в определенных элементах. Когда происходит событие, выполняется функция прослушивания. Наиболее распространенным способом добавления прослушивателя событий к элементу является использование метода addEventListener(), который принимает два аргумента: тип события для прослушивания и функцию, которая выполняется при возникновении события. "
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "Например, вы можете использовать следующий код, чтобы добавить прослушиватель событий щелчка к элементу button:"
        },
        {
          "tag": "code",
          "classes": [
            "lesson__code"
          ],
          "textContent": [{
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "let button = document.querySelector(\"button\");"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "button.addEventListener(\"click\", function(){"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "console.log(\"Button was clicked!\");"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__code-line"
            ],
            "textContent": "});"
          }
          ]
        },
        {
          "tag": "p",
          "classes": [
            "lesson__text"
          ],
          "textContent": "В этом примере функция, переданная addEventListener, будет выполнена при нажатии кнопки."
        }
        ]
      },
      "lesson-study": {
        "lessonTitle": "Самостоятельная работа",
        "lessonDescription": "Решите задачи на кодирование, используя JavaScript.Реализуйте функциональную составляющую веб-страницы",
        "lessonContent": [
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Описание задания:"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__text"
            ],
            "textContent": "Решите задачи на кодирование, используя JavaScript.Реализуйте функциональную составляющую веб-страницы"
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Ход работы:"
          },
          {
            "tag": "ol",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Внутри папки для выполнения работ “webtechs” создайте папку для выполнения пятой самостоятельной работы “project_5”. Внутри неё создайте папку “project_5_exs”. Внутри данной папки создайте файлы “index.html” и “main.js”"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "В index.html создайте HTML-шаблон и подключите “main.js” к “index.html”."
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Решите представленные в задании задачи на кодирование на языке JavaScript в файле “main.js”. Используйте index.html и раздел Console в DevTools в браузере для обнаружения ошибок и вывода результатов."
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Внутри папки “project_5” разместите файлы из папки “project_4”. Создайте папку “scripts” и внутри неё создайте файл “main.js”. Подключите данный файл к “index.html” из папки “project_5” "
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "С помощью JavaScript реализуйте следующий функционал на веб-странице, выполненной в прошлом задании: открытие и закрытие меню навигации и окна поиска, добавление и удаление элементов по нажатии на кнопки"
              }
            ]
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Критерии оценивания:"
          },
          {
            "tag": "ul",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "При решении задач и функционала страницы в разделе “Console” в DevTools не появляются ошибки"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "При открытии, закрытии, появлении и исчезновении элементов на странице остальные элементы либо не меняют свое позиционирование, либо меняют его по вертикали, а также отсутствует горизонтальный скроллбар"
              }
            ]
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Материалы для выполнения задания:"
          },
          {
            "tag": "ul",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://github.com/MypyMypy/MypyMypy.github.io/blob/main/herzen-project/public/lesson-materials/5-js/expected-results.zip",
                      "download": "true",
                      "target": "_blank"
                    },
                    "textContent": "Скачать архив с изображениями ожидаемого результата"
                  }
                ]
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": [
                  {
                    "tag": "a",
                    "classes": [
                      "lesson__text"
                    ],
                    "attributes": {
                      "href": "https://github.com/MypyMypy/MypyMypy.github.io/blob/main/herzen-project/public/lesson-materials/5-js/tasks.js",
                      "download": "true",
                      "target": "_blank"
                    },
                    "textContent": "Скачать файл с задачами на кодирование"
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  },
  "page-product": {
    "id": 6,
    "title": "Проектная деятельность",
    "moduleLinkHref": "/page?moduleName=page-product",
    "lessons": {
      "lesson-study": {
        "lessonTitle": "Самостоятельная работа",
        "lessonDescription": "Самостоятельная разработка проекта",
        "lessonContent": [
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Описание задания:"
          },
          {
            "tag": "p",
            "classes": [
              "lesson__text"
            ],
            "textContent": "Самостоятельная разработка проекта"
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Ход работы:"
          },
          {
            "tag": "ol",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Разработайте концепт и дизайн веб-сайта "
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Внутри папки для выполнения работ “webtechs” создайте папку для выполнения шестой самостоятельной работы “project_6”."
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Создайте и поместите в неё все необходимые для работы файлы, а также изображение разработанного дизайна"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Выполните HTML-разметку, CSS-стилизацию и внедрите JS-функционал страницы с учетом ранее изученного в курсе материала"
              }
            ]
          },
          {
            "tag": "h2",
            "classes": [
              "lesson__sub-header"
            ],
            "textContent": "Критерии оценивания:"
          },
          {
            "tag": "ul",
            "classes": [
              "lesson__list"
            ],
            "textContent": [
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "В дизайне страницы должно четко прослеживаться разделение на верхнюю, основную и нижнюю части страницы. Использование веб-страницы должно быть интуитивно понятно при любом взаимодействии с ним пользователем"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Организована структура папки"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Используются только относительные пути"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Классы имеют осмысленные имена"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Все селекторы основаны на классах"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Разметка не перегружена, в ней используются семантические элементы"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Используется CSS-Flexbox, отступы между элементами реализованы с помощью псевдоклассов"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "Отсутствуют ошибки в JS-коде"
              },
              {
                "tag": "li",
                "classes": [
                  "lesson__list-item"
                ],
                "textContent": "JS-код не дублируется"
              }
            ]
          }
        ]
      }
    }
  }
}